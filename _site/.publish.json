{"name":"","product":"","base_path":"/","files":[{"url":"/images/favicon.png","path":"../images/favicon.png","source_path":"images/favicon.png","locale":"en-us"},{"url":"/images/logo.svg","path":"../images/logo.svg","source_path":"images/logo.svg","locale":"en-us"},{"url":"/images/resolver-override.png","path":"../images/resolver-override.png","source_path":"images/resolver-override.png","locale":"en-us"},{"url":"/api/","path":"api/index.html","source_path":"api/index.md","locale":"en-us","canonical_url":"https:///en-us/api/","conceptual":"\n<p>This documentation is generated by DocFX</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/api/index.md","depot_name":".","document_id":"b900a6ee-1d3b-cc19-ca58-f621b5ddfbff","document_version_independent_id":"62c4b9bf-c97a-4afb-633c-37a573696248","gitcommit":"https://github.com/unitycontainer/documentation/blob/fc9fe03376dd8ca08cf491c586c6f6e4e720545a/api/index.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/api/index.md","original_content_git_url_template":"{repo}/blob/{branch}/api/index.md","rawTitle":"<h1 id=\"api-documentation-section\">API Documentation Section</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"API Documentation Section","updated_at":"2017-11-26 02:59 AM","wordCount":6},{"url":"/api/toc.json","path":"api/toc.json","source_path":"api/toc.yml","locale":"en-us"},{"url":"/articles/application/","path":"articles/application/index.html","source_path":"articles/application.md","locale":"en-us","canonical_url":"https:///en-us/articles/application/","conceptual":"\n<p>Features such as inversion of control, dependency injection, interception, factory, and lifetime  provide several major advantages when building applications that consist of many individual classes and components. Designing applications that conform to these patterns can provide numerous benefits:</p>\n<ul>\n<li>Decoupling service providers from service consumers</li>\n<li>Runtime as well as design time configuration of services and dependencies</li>\n<li>Ability to substitute one component for another.</li>\n<li>Centralization and abstraction of crosscutting concerns (logging, authentication, caching, and etc).</li>\n<li>Advanced lifetime management of components and services.</li>\n<li>Simplified testability for individual components and sections of the application.</li>\n<li>Simplified overall design, with faster and less error-prone development.</li>\n<li>Improved reusability of components within other applications.</li>\n</ul>\n<p>Unity provides a comprehensive dependency injection and interception platform, and is easy to incorporate into your applications. However, it does change the way that you design these applications. The following sections of this topic describe areas where dependency injection is useful:</p>\n<ul>\n<li>Pluggable Architectures</li>\n<li>Managing Crosscutting Concerns</li>\n<li>Service and Component Location</li>\n<li>Policy Injection through Interception</li>\n</ul>\n<h2 id=\"pluggable-architectures\">Pluggable Architectures</h2>\n<p>By designing applications to use a pluggable architecture, developers and users can add and modify the functionality of an application without changing the core code or processes. ASP.NET is an example of a pluggable architecture, where you can add and remove providers for features such as authentication, caching, and session management. Unity also facilitates a pluggable architecture that allows you to substitute the container for one of your own design and add extensions through the container extensions architecture.</p>\n<p>By using dependency injection mechanisms, such as Unity container, developers can map different components that implement a specific interface (such as a provider interface) or that inherit from a specific base class to the appropriate concrete implementations. Developers can then obtain a reference to the appropriate provider component at run time, without having to specify exactly which implementation of the component is required. The following sections of this topic, Managing Crosscutting Concerns and Service and Component Location, show how you can use dependency injection to create instances of a specific class based on a request for a more general class (such as an interface or base class definition).</p>\n<p>In addition, the providers may require instances of other components. For example, a caching provider may need to use the services of a cryptography component or service. When components require the services of other components, you can use dependency injection to automatically instantiate and inject instances of these components into a component, based on either configuration settings in the container or on code within the application.</p>\n<p>For more information about how you can use dependency injection in this way, see Using Injection Attributes.</p>\n<h2 id=\"managing-crosscutting-concerns\">Managing Crosscutting Concerns</h2>\n<p>The features and tasks implemented in applications are often referred to as concerns. The tasks specific to the application are core concerns. The tasks that are common across many parts of the application, and even across different applications, are crosscutting concerns. Most large applications require services such as logging, caching, validation, and authorization, and these are crosscutting concerns.</p>\n<p>The simplest way to centralize these features is to build separate components that implement each of the required features, and then use these components wherever the management of that concern is requiredâ€”in one or more applications. By using dependency injection mechanisms, such as a Unity container, developers can register components that implement crosscutting concerns and then obtain a reference to the component at run time, without having to specify exactly which implementation of the component is required.</p>\n<p>For example, if you have a component named FileLogger that performs logging tasks, your application can instantiate this component using the new operator, as shown in the following code.</p>\n<pre><code class=\"lang-C#\">FileLogger myLogger = new FileLogger();\n</code></pre>\n<p>If you then want to change the application to use the new component, FastFileLogger, you must change the application code. However, if you have an interface ILogger that all implementations of the logging component uses, you might instead write the code like the following.</p>\n<pre><code class=\"lang-C#\">ILogger myLogger = new FileLogger();\n</code></pre>\n<p>However, this does not solve the problem because you still must find everywhere in the code where you used new() to create an instance of the specific class. Instead, you can use a dependency injection mechanism to map the ILogger interface to a specific concrete instance of the logging component, or even to multiple implementations, so that the application can specify which one it requires. The following code uses Unity to register a mapping for both a default type of logging component and a named type with the ILogger interface. Alternatively, you can specify these mappings using the Unity configuration file.</p>\n<pre><code class=\"lang-C#\">// Create container and register types\nIUnityContainer myContainer = new UnityContainer();\nmyContainer.RegisterType&lt;ILogger, FileLogger&gt;();       // default instance\nmyContainer.RegisterType&lt;ILogger, FastFileLogger&gt;(&quot;FastLogger&quot;);\n</code></pre>\n<p>The application can then obtain a reference to the default logging component using the following code.</p>\n<pre><code class=\"lang-C#\">ILogger myLogger = myContainer.Resolve&lt;ILogger&gt;();\n</code></pre>\n<p>In addition, the application can use a variable (perhaps set in configuration or at run time) to specify a different implementation of the logging component interface as required, as shown in the following code.</p>\n<pre><code class=\"lang-C#\">// Retrieve logger type name from configuration\nString loggerName = ConfigurationManager.AppSettings[&quot;LoggerName&quot;].ToString();\nILogger myLogger = myContainer.Resolve&lt;ILogger&gt;(loggerName);\n</code></pre>\n<p>For more information about registering types, type mappings, and resolving instances, see Resolving Objects.</p>\n<h2 id=\"service-and-component-location\">Service and Component Location</h2>\n<p>Frequently, applications require the use of services or components that are specific to the application; examples are business logic components, data access components, interface components, and process controllers. In some cases, these services may be instance-based, so that each section of the application or each task requires a separate individual instance of the service. However, it is also common for services to be singleton-based, so that every user of the service references the same single instance of the service.</p>\n<p>A service location facility makes it easy for an application to obtain a reference to a service or component, without having to specify where to look for the specific service or whether it is a singleton-based or an instance-based service. By using dependency injection mechanisms, such as the Unity container, developers can register services in the appropriate way and then obtain a reference to the service at run time, without having to specify exactly which implementation of the service is required or what type of instance it actually is.</p>\n<p>For example, if you have a singleton service class named CustomerData that you interact with to read and update information for any customer, your application obtains a reference to this service usually by calling a static GetInstance method of the service (which ensures that it is a singleton and that only one instance can exist), as shown in the following code.</p>\n<pre><code class=\"lang-C#\">CustomerData cData = CustomerData.GetInstance();\n</code></pre>\n<p>Instead, you can use the Unity container to set the CustomerData class type with a specific lifetime that ensures it behaves as a singleton so that every request for the service returns the same instance, as shown in the following code. Alternatively, you could specify these mappings using the Unity configuration file.</p>\n<pre><code class=\"lang-C#\">// Create container and register type as a singleton instance\nIUnityContainer myContainer = new UnityContainer();\nmyContainer.RegisterType&lt;CustomerData&gt;(new ContainerControlledLifetimeManager());\n</code></pre>\n<p>The application can then obtain a reference to the single instance of the CustomerData service using the following code. If the instance does not yet exist, the container creates it.</p>\n<pre><code class=\"lang-C#\">CustomerData cData = myContainer.Resolve&lt;CustomerData&gt;();\n</code></pre>\n<p>In addition, perhaps a new CustomerFile component you decide to use in your application inherits the same base class named CustomerAccessBase as the CustomerData service, but it is not a singletonâ€”instead, it requires that your application instantiate an instance for each customer. In this case, you can specify mapping names when you register one component as a singleton type and one component as an instance type (with the default transient lifetime), and then use the same application code to retrieve the required instance.</p>\n<p>For example, the following code shows how you can register two named mappings for objects that inherit from the same base class, thenâ€”at run timeâ€”collect a string value from elsewhere in the application configuration that specifies which of the mappings to use. In this case, the value comes from the AppSettings section of the configuration file. If the value with the key CustomerService contains CustomerDataService, the code returns an instance of the CustomerData class. If it contains the value CustomerFileService, the code returns an instance of the CustomerFile class.</p>\n<pre><code class=\"lang-C#\">IUnityContainer myContainer = new UnityContainer();\n// Register CustomerData type as a singleton instance\nmyContainer.RegisterType&lt;CustomerAccessBase, CustomerData&gt;(&quot;CustomerDataService&quot;, \n                        new ContainerControlledLifetimeManager());\n// Register CustomerFile type with the default transient lifetime\nmyContainer.RegisterType&lt;CustomerAccessBase, CustomerFile&gt;(&quot;CustomerFileService&quot;);\n...\nString serviceName = ConfigurationManager.AppSettings[&quot;CustomerService&quot;].ToString();\nCustomerAccessBase cData \n  = (CustomerAccessBase)myContainer.Resolve&lt;CustomerAccessBase&gt;(serviceName);\n</code></pre>\n<p>For more information about registering types, type mappings, and resolving instances, see Resolving Objects. For more information about using lifetime managers to control the creation, lifetime, and disposal of objects, see Understanding Lifetime Managers.</p>\n<h2 id=\"policy-injection-through-interception\">Policy Injection through Interception</h2>\n<p>Unity interception with its built-in policy injection module enables you to effectively capture calls to objects you resolve through the Unity DI container, and apply a policy that adds additional functionality to the target object. Typically, you will use this technique to change the behavior of existing objects, or to implement the management of crosscutting concerns through reusable handlers. You can specify how to match the target object using a wide range of matching rules, and construct a policy pipeline that contains one or more call handlers.</p>\n<p>Calls to the intercepted methods or properties of the target object then pass through the call handlers in the order you add them to the pipeline, and return through them in the reverse order. Your call handlers can access the values in the call, change these values, and control execution of the call. For example, the call handlers might authorize users, validate parameter values, cache the return value, and shortcut execution so that the target method does not actually execute where this is appropriate.</p>\n<p>You can configure Unity for policy injection by using a configuration file at design time, see Configuring Policy Injection Policies, or by using the API at run time, see Registering Policy Injection Components.</p>\n<p>The following example uses the Unity API to demonstrate how you can configure Unity to perform interception on a target object, using a policy that contains a logging handler and a validation handler. Notice that the logging handler is added first, so that it will log calls even if validation fails and the validation handler shortcuts the pipeline instead of calling the method of the target object. You can use the streamlined policy definition API provided by the Unity interception container extension to configure the container at run time or you can specify the same behavior at design time by using a configuration file. For an example using the API, see Registering Policy Injection Components. For a design time example, see Configuration Files for Interception.</p>\n<pre><code class=\"lang-C#\">// Create a container and add the interception extension.\nIUnityContainer myContainer = new UnityContainer();\nmyContainer.AddNewExtension&lt;Interception&gt;();\n\n// Configure the container with a policy named MyPolicy\n// that uses a TypeMatchingRule to match a custom class\n// and adds a logging handler and a validation handler\n// to the handler pipeline. You must specify at least one\n// matching rule or the policy will not be applied.\nmyContainer.Configure&lt;Interception&gt;()\n    .AddPolicy(&quot;MyPolicy&quot;)\n         .AddMatchingRule&lt;TypeMatchingRule&gt;(\n                  new InjectionConstructor(&quot;MyCustomType&quot;))\n         .AddCallHandler(typeof(MyLoggingCallHandler))\n         .AddCallHandler(typeof(MyValidationCallHandler));\n\n// Configure the container to intercept calls to the\n// custom class using a TransparentProxyInterceptor.\nmyContainer.RegisterType&lt;MyCustomType&gt;(&quot;myType&quot;,\n    new Interceptor&lt;TransparentProxyInterceptor&gt;(),\n    new InterceptionBehavior&lt;PolicyInjectionBehavior&gt;());\n\n\n// Resolve the custom type through the container when\n// you are ready to use it. When you call a method or\n// set a property on it, the call will pass through\n// the logging handler and the validation handler.\nMyCustomType myNewInstance = myContainer.Resolve&lt;MyCustomType&gt;(&quot;myType&quot;);\n</code></pre>\n<p>For more information about interception and policy injection, see Using Interception and Policy Injection.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/application.md","depot_name":".","document_id":"2f0a617d-9eaf-6117-88ac-584be21485aa","document_version_independent_id":"c37f1880-64cb-c594-2a5c-a9c15ec1b0e8","gitcommit":"https://github.com/unitycontainer/documentation/blob/a08c5cd38778dbc7606660e730b63c1a6800daf1/articles/application.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/application.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/application.md","rawTitle":"<h1 id=\"application-design-concepts-with-unity\">Application Design Concepts with Unity</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Application Design Concepts with Unity","uid":"Article.Application.Design","updated_at":"2019-03-04 02:14 AM","wordCount":1920},{"url":"/articles/changelog/","path":"articles/changelog/index.html","source_path":"articles/changelog.md","locale":"en-us","canonical_url":"https:///en-us/articles/changelog/","conceptual":"\n<p>This document contains a list of breaking changes and noteworthy issues. At this time the list is not complete. If you discover an issue while upgrading that is not covered here please open an issue or, preferably, issue a pull request. You can clone the wiki to do that.</p>\n<p>Some breaking changes are currently documented in the issue tracker only. Again, please report any such findings by commenting on the issue.</p>\n<h2 id=\"upgrading-to-unity-59x\">Upgrading to Unity 5.9.x</h2>\n<p>Starting with version 5.9.0 Unity package will only contain Unity.Abstractions and Unity.Container packages.</p>\n<p>All other packages will be available as individual NuGet packages</p>\n<h2 id=\"breaking-change\">Breaking change</h2>\n<p>Some extension methods have been moved out of the Unity nuget package and have been moved into their own individual packages.</p>\n<p>For example, the following code will no longer work</p>\n<pre><code class=\"lang-C#\">Container = new UnityContainer();\nContainer.LoadConfiguration();\n</code></pre>\n<p>You will receive an error that the namespace <strong>Microsoft.Practices.Unity.Configuration</strong> no longer exists in your using statements.</p>\n<h2 id=\"the-fix\">The Fix</h2>\n<p>To fix this and similar problems, add the required nuget packages separately.</p>\n<p>For the example above, add nuget package <strong>Unity.Configuration</strong></p>\n<p><em>This wiki created with help from <a href=\"https://github.com/quintonn\" data-linktype=\"external\">quintonn</a></em></p>\n<h2 id=\"upgrading-to-unity-58x\">Upgrading to Unity 5.8.x</h2>\n<p>Unity 5.8.0 adds support for nesting generic types when resolving collections (arrays and enumerables).</p>\n<h3 id=\"problem\">Problem</h3>\n<p>Unity has build in support for <code>IEnumerable&lt;&gt;</code>, <code>Array</code> ( <code>type[]</code> ), <code>Func&lt;&gt;</code>, and <code>Lazy&lt;&gt;</code>. Theoretically it should be able to recognize these types and properly resolve them individually and in combination. Unfortunately it did not do so. For example if you registered several interfaces like this:</p>\n<pre><code class=\"lang-C#\">RegisterType&lt;IService, Service&gt;(&quot;1&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;2&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;3&quot;);\nRegisterType&lt;IService, Service&gt;();\n</code></pre>\n<p>resolving enumerable in combination with generic will resolve incorrectly:</p>\n<pre><code class=\"lang-C#\">Resolve&lt;Lazy&lt;IEnumenrable&lt;type&gt;&gt;&gt;  - resolve correctly\nResolve&lt;IEnumenrable&lt;Lazy&lt;type&gt;&gt;&gt;  - resolve empty\n</code></pre>\n<h3 id=\"the-fix-1\">The Fix</h3>\n<p>Release v5.8.0 fixes resolution of collections of generic and array types and Lazy collections of items. This will now work fine:</p>\n<pre><code class=\"lang-C#\">Resolve&lt;Lazy&lt;IEnumenrable&lt;type&gt;&gt;&gt;\nResolve&lt;IEnumenrable&lt;Lazy&lt;type&gt;&gt;&gt;\n\nResolve&lt;Lazy&lt;type[]&gt;&gt;\nResolve&lt;Lazy&lt;type&gt;[]&gt;\n\nResolve&lt;IEnumerable&lt;Lazy&lt;Func&lt;IService&gt;&gt;&gt;&gt;()\nResolve&lt;IEnumerable&lt;Func&lt;Lazy&lt;IService&gt;&gt;&gt;&gt;()\n\nResolve&lt;Lazy&lt;Func&lt;IService&gt;&gt;[]&gt;()\nResolve&lt;Func&lt;Lazy&lt;IService&gt;&gt;[]&gt;()\n</code></pre>\n<p>The logic behind resolving collections is to find type to enumerate and get all registrations for it no matter how deep in generics tree. Enumerated type could be:</p>\n<ul>\n<li>Non generic (Constructed Generic) type</li>\n<li>Explicitly registered type</li>\n</ul>\n<p>So, in this example</p>\n<pre><code class=\"lang-C#\">RegisterType&lt;IService, Service&gt;(&quot;1&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;2&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;3&quot;);\nRegisterType&lt;IService, Service&gt;();\n\nResolve&lt;IEnumerable&lt;Func&lt;Lazy&lt;IService&gt;&gt;&gt;&gt;();\n</code></pre>\n<p>Unity will recognize <code>IService</code> as registered type and enumerate four instances of <code>Func&lt;Lazy&lt;IService&gt;&gt;</code>.</p>\n<p>But if you look at this example:</p>\n<pre><code class=\"lang-C#\">RegisterType&lt;IService, Service&gt;(&quot;1&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;2&quot;);\nRegisterType&lt;IService, Service&gt;(&quot;3&quot;);\nRegisterType&lt;IService, Service&gt;();\n\nRegisterType(typeof(IFoo&lt;&gt;), typeof(Foo&lt;&gt;));  &lt;-- note this registraton\n\nResolve&lt;IEnumerable&lt;IFoo&lt;IService&gt;&gt;&gt;();\n</code></pre>\n<p>Returned result is different! Adding registration for IFoo changes enumerable type to IFoo. This resolution will only return one item.</p>\n<h3 id=\"breaking-change-1\">Breaking change</h3>\n<p>Sometimes you do want Unity to ignore a generic when it resolves collections similar to how it deals with <code>Lazy</code> and <code>Func</code>. Suppose in example above you want Unity to resolve all four of IService instances wrapped in <code>IFoo</code>.\nTo do so you would have to make <code>IFoo&lt;&gt;</code> a <strong>Built-In</strong> type of the container.</p>\n<p>It could be simply done by creating either <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlanCreator/FooBuildPlanCreatorPolicy.cs\" data-linktype=\"external\">IBuildPlanCreatorPolicy</a> or <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlan/FooBuildPlanPolicy.cs\" data-linktype=\"external\">IBuildPlanPolicy</a> factories.\nThere are just a few steps you need to follow:</p>\n<ul>\n<li>Create factory for the generic (See example for <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlanCreator/FooBuildPlanCreatorPolicy.cs\" data-linktype=\"external\">IBuildPlanCreatorPolicy</a> or <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlan/FooBuildPlanPolicy.cs\" data-linktype=\"external\">IBuildPlanPolicy</a> )</li>\n<li>Create and extension to get access to Unity internal policies and register your factory (See example <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlanCreator/FooUnityExtension.cs\" data-linktype=\"external\">IBuildPlanCreatorPolicy</a> or  <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlan/FooUnityExtension.cs\" data-linktype=\"external\">IBuildPlanPolicy</a>)</li>\n<li>Register your extension with <code>UnityContainer</code></li>\n</ul>\n<p>For examples of how it should be done please follow <a href=\"https://github.com/unitycontainer/examples/tree/master/src/Extending%20Unity\" data-linktype=\"external\">this link</a>.</p>\n<h2 id=\"upgrading-to-unity-521\">Upgrading to Unity 5.2.1</h2>\n<p>This release fundamentally changes how types are registered with Unity. The rationale behind this change is <a href=\"https://github.com/unitycontainer/container/issues/35\" data-linktype=\"external\">this issue</a>.</p>\n<h3 id=\"the-problem\">The problem</h3>\n<p>To explain the problem please look at this example. Prior to this release registering singleton <code>ILogger</code> service like this:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;ILogger, MockLogger&gt;(new ContainerControlledLifetimeManager(), new InjectionConstructor());\n</code></pre>\n<p>would create two registrations:</p>\n<ol>\n<li>A mapping between <code>ILogger</code> to <code>MockLogger</code></li>\n<li>A singleton registration for <code>MockLogger</code> with default constructor.</li>\n</ol>\n<p>Calling <code>container.Resolve&lt;ILogger&gt;()</code> resolves singleton instance of <strong>MockLogger</strong> as expected, and resolving type <strong>MockLogger</strong> <code>container.Resolve&lt;MockLogger&gt;()</code> would resolve <strong>the same</strong> instance of <strong>MockLogger</strong>. Both <strong>ContainerControlledLifetimeManager</strong> and <strong>InjectionConstructor</strong> would be associated with <strong>MockLogger</strong> registration.</p>\n<p>Suppose you want to resolve a new <strong>MockLogger</strong> whenever it is resolved directly like this  <code>container.Resolve&lt;MockLogger&gt;()</code>. To do so you would create another registration just for the <strong>MockLogger</strong>:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;MockLogger&gt;(new TransientLifetimeManager());\n</code></pre>\n<p>So, now when you call <code>container.Resolve&lt;MockLogger&gt;()</code> it resolves new instance of the <strong>MockLogger</strong> class and uses constructor with longest list of parameters. All is well and as expected. But now if you try to resolve <code>container.Resolve&lt;ILogger&gt;()</code> it is no longer returns singleton instance of the <strong>MockLogger</strong>. Now it also returns new <strong>MockLogger</strong> created with constructor with longest list of parameters.\nThe subsequent registration overwritten all information associated with <code>ILogger</code>.</p>\n<h3 id=\"the-solution\">The solution</h3>\n<p>Release 5.2.1 fixes this behavior. Now all information passed to Unity during registration is stored with <code>FromType</code> instead of <code>ToType</code>. So registering type like this:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;ILogger, MockLogger&gt;(new ContainerControlledLifetimeManager(), new InjectionConstructor());\n</code></pre>\n<p>creates just one registration <code>ILogger</code> and associates <strong>LifetimeManager</strong> and all provided <strong>InjectionMemebers</strong> with it. At this point  <strong>MockLogger</strong> is still unregistered.</p>\n<p>So, think about it as a <code>RegisteredType</code> and <code>MappedTo</code> type. If you look at initial example:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;ILogger, MockLogger&gt;(new ContainerControlledLifetimeManager());\n</code></pre>\n<p><code>ILogger</code> - is a registered type and ContainerControlledLifetimeManager is associated with this type, as well as any <code>InjectionMembers</code> you provide during registration.</p>\n<h3 id=\"breaking-changes\">Breaking changes</h3>\n<p>This release breaks a lot of registrations. Anything relaying on TypeTo being registered in mappings will fail. For example:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;ILogger, MockLogger&gt;(new ContainerControlledLifetimeManager());\n\nAssert.AreSame( container.Resolve&lt;ILogger&gt;(), container.Resolve&lt;MockLogger&gt;()) &lt;-- Will fail now\n</code></pre>\n<p>This could be easily fixed by slightly modifying how types are registered. If you want TypeTo to be available independently you could register it like this:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;MockLogger&gt;(new ContainerControlledLifetimeManager());\ncontainer.RegisterType&lt;ILogger, MockLogger&gt;();\n\nAssert.AreSame( container.Resolve&lt;ILogger&gt;(), container.Resolve&lt;MockLogger&gt;()) &lt;-- Passes\n</code></pre>\n<p>This applies to anything you registering with the type: factories, injection members, interceptors, etc.</p>\n<h3 id=\"fixing\">Fixing</h3>\n<p>With some creative searching and sorting these breaking registrations could be identified statically, without running the code. The key is to look for registrations with same TypeTo type. If you see multiple registrations registering same type as implementation type and at least one of them has non transient lifetime it is a good indicator that it might fail after update:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;ILogger, Logger&gt;(new ContainerControlledLifetimeManager());\n...\ncontainer.RegisterType&lt;IOtherLogger, Logger&gt;();\n</code></pre>\n<p>To fix just add individual registration for implementation type with proper lifetime manager like so:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;Logger&gt;(new ContainerControlledLifetimeManager());\n...\ncontainer.RegisterType&lt;ILogger, Logger&gt;();\n...\ncontainer.RegisterType&lt;IOtherLogger, Logger&gt;();\n</code></pre>\n<p>Make sure it is registered before other mappings.</p>\n<h2 id=\"upgrading-to-unityabstractions-414\">Upgrading to Unity.Abstractions 4.1.4</h2>\n<p>Lifetime managers now support the value <code>null</code>. <code>GetValue</code> must return <code>LifetimeManager.NoValue</code> to indicate that no value has been set. You must upgrade custom lifetime managers to not return <code>null</code> inappropriately. Mainly the <code>GetValue</code> method must be adjusted. The built-in lifetime managers have been upgraded. If you do not use custom lifetime managers you should not see any changes in behavior. (<a href=\"https://github.com/unitycontainer/abstractions/issues/102\" data-linktype=\"external\">https://github.com/unitycontainer/abstractions/issues/102</a>)</p>\n<p>Design time validation for <code>LifetimeManager</code> was added. The marker interfaces <code>ITypeLifetimeManager</code>, <code>IInstanceLifetimeManager</code> and <code>IFactoryLifetimeManager</code> have been introduced. Various other parts of the framework now refer to these types instead of <code>LifetimeManager</code>. The marker interfaces are empty and <code>LifetimeManager</code> does not inherit from any of them. This can lead to compiler errors. In general these errors can be fixed through  changing the type of variables or through casting. (<a href=\"https://github.com/unitycontainer/abstractions/issues/90\" data-linktype=\"external\">https://github.com/unitycontainer/abstractions/issues/90</a>)</p>\n<h2 id=\"upgrading-to-unityabstractions-400350\">Upgrading to Unity.Abstractions 4.0.0.350</h2>\n<p>The namespace <code>Unity.Attributes</code> was removed. These types are now in namespace <code>Unity</code>. One common type that is affected is <code>DependencyAttribute</code>. Suggested way to upgrade: Mass delete the old namespace reference using the Regex <code>using Unity.Attributes;\\r\\n</code> in Visual Studio. Then, use Resharper to fix missing imports in the entire solution in one action.</p>\n<h2 id=\"upgrading-to-unityabstractions-4000\">Upgrading to Unity.Abstractions 4.0.0.0</h2>\n<p>A few breaking changes have been made. For more information see <a href=\"https://github.com/unitycontainer/abstractions/issues/97\" data-linktype=\"external\">https://github.com/unitycontainer/abstractions/issues/97</a>.</p>\n<h3 id=\"problem-1\">Problem</h3>\n<p>Build error <code>The type or namespace name 'IBuilderContext' could not be found.</code></p>\n<h3 id=\"solution\">Solution</h3>\n<p><code>IBuilderContext</code> has been replaced with: <code>Unity.Builder.BuilderContext</code></p>\n<h3 id=\"problem-2\">Problem</h3>\n<p>Build Error `'IBuildPlanCreatorPolicy' is obsolete: 'This interface has been replaced with Unity.Policy.ResolveDelegateFactory delegate'``</p>\n<h3 id=\"solution-1\">Solution</h3>\n<p>See <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlanCreator/FooBuildPlanCreatorPolicy.cs\" data-linktype=\"external\">this example</a> or <a href=\"https://github.com/unitycontainer/microsoft-logging/blob/master/src/LoggingExtension.cs\" data-linktype=\"external\">this example</a> or <a href=\"https://github.com/unitycontainer/examples/blob/master/src/Extending%20Unity/BuildPlanCreator/FooBuildPlanCreatorPolicy.cs\" data-linktype=\"external\">this example</a></p>\n<h3 id=\"problem-3\">Problem</h3>\n<p>Build Error in <code>BuilderStrategy</code> derived classes: <code>'MyCustomStrategy.PreBuildUp(BuilderContext)': no suitable method found to override</code></p>\n<h3 id=\"solution-2\">Solution</h3>\n<p>Adjust the signature of the <code>PreBuildUp</code> method to: <code>public override void PreBuildUp(ref BuilderContext context)</code></p>\n<h3 id=\"problem-4\">Problem</h3>\n<p>Build Error in <code>BuilderStrategy</code> derived classes: <code>'MyCustomStrategy.PostBuildUp(BuilderContext)': no suitable method found to override</code></p>\n<h3 id=\"solution-3\">Solution</h3>\n<p>Adjust the signature of the PostBuildUp method to:\npublic override void PreBuildUp(ref BuilderContext context)</p>\n<h3 id=\"problem-5\">Problem</h3>\n<p>Build Error in Builder Strategy derived class:\n<code>'BuilderContext' does not contain a definition for 'AddResolverOverrides' and no accessible extension method 'AddResolverOverrides' accepting a first argument of type 'BuilderContext' could be found</code></p>\n<h3 id=\"solution-4\">Solution</h3>\n<p>The behaviour can be mimicked by something like:</p>\n<pre><code class=\"lang-cs\">        public static void AddResolverOverrides(ref BuilderContext ctx, ResolverOverride theOverride)\n        {\n            var newOverrides = ctx.Overrides;\n            newOverrides = newOverrides == null \n                ? new ResolverOverride[]{theOverride} \n                : newOverrides.Concat(new[] {theOverride}).ToArray();\n\n            ctx.Overrides = newOverrides;\n        }\n</code></pre>\n<h3 id=\"problem-6\">Problem</h3>\n<p><code>'BuilderContext' does not contain a definition for 'ParentContext' and no accessible extension method 'ParentContext' accepting a first argument of type 'BuilderContext' could be found</code></p>\n<p>I used the <code>ParentContext</code> of <code>IBuilderContext</code> to determine if anything in the build hierarchy was of a certain type. More specifically I was checking to see if a specific decorator class was being applied as part of the build.</p>\n<h3 id=\"solution-5\">Solution</h3>\n<p>There is an <code>IntPtr Parent</code> property on the <code>BuilderContext</code> struct. Can this be used to find the parent context?</p>\n<h3 id=\"problem-7\">Problem</h3>\n<p>There is a build warning:\n<code>'InjectionFactory' is obsolete: 'InjectionFactory has been deprecated and will be removed in next release. Please use IUnityContainer.RegisterFactory(...) method instead.'</code></p>\n<h3 id=\"solution-6\">Solution</h3>\n<p>The <code>InjectionFactory</code> class has been deprecated. Injection factories are now registered directly with the container.\nFor example:</p>\n<p><strong>Old code:</strong>\n<code>Container.RegisterType&lt;IEncryptionProvider&gt;(new ContainerControlledLifetimeManager(), new InjectionFactory(c =&gt; MakeEncryptionProvider(c)));</code></p>\n<p><strong>New code:</strong>\n<code>Container.RegisterFactory&lt;IEncryptionProvider&gt;(c =&gt; MakeEncryptionProvider(c), new ContainerControlledLifetimeManager());</code></p>\n<h3 id=\"be-aware\">Be Aware</h3>\n<p>The public key token of the assembly has changed, so you may need to remove redundant assembly bindings from config files.</p>\n<p>For example:\nThis binding will now be ineffective, and can be removed:</p>\n<pre><code class=\"lang-xml\">      &lt;dependentAssembly&gt;\n        &lt;assemblyIdentity name=&quot;Unity.Abstractions&quot; publicKeyToken=&quot;6d32ff45e0ccc69f&quot; culture=&quot;neutral&quot; /&gt;\n        &lt;bindingRedirect oldVersion=&quot;0.0.0.0-3.3.0.0&quot; newVersion=&quot;3.3.0.0&quot; /&gt;\n      &lt;/dependentAssembly&gt;\n</code></pre>\n<p>Note:</p>\n<ul>\n<li>The old public key token value is <code>6d32ff45e0ccc69f</code></li>\n<li>The new public key token is <code>489b6accfaf20ef0</code></li>\n</ul>\n<h3 id=\"problem-8\">Problem</h3>\n<p>Build Error in <code>BuilderStrategy</code> derived classes: <code>'MyCustomStrategy.PostBuildUp(BuilderContext)': no suitable method found to override</code></p>\n<h3 id=\"solution-7\">Solution</h3>\n<p>Adjust the signature of the <code>PostBuildUp</code> method to: <code>public override void PreBuildUp(ref BuilderContext context)</code></p>\n<h3 id=\"problem-9\">Problem</h3>\n<p>I'm using this code to register my interfaces:</p>\n<pre><code>Containter.RegisterType&lt;ICustomerRepository, CustomerRepository&gt;(new ContainerControlledLifetimeManager(), InjectionConstructor);\n</code></pre>\n<p>But after the upgrade im getting the following error when resolving:</p>\n<pre><code class=\"lang-bash\">Exception thrown: 'System.InvalidCastException' in Unity.Abstractions.dll\nUnable to cast object of type\n</code></pre>\n<h3 id=\"solution-8\">Solution</h3>\n<p>Ok I managed to find out what I was doing wrong.\nI was reusing the same 'InjectionConstructor' for all my registrations.\nAfter replacing them with a new instance for each my problem went away.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/changelog.md","depot_name":".","document_id":"6a34c583-fac2-de3b-02e6-295347f24cec","document_version_independent_id":"f49a2693-93c2-cc77-ff66-251ae7c171be","gitcommit":"https://github.com/unitycontainer/documentation/blob/3838863b96854037a5cc56e5c9a81bf7bcdc15c5/articles/changelog.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/changelog.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/changelog.md","rawTitle":"<h1 id=\"upgrading-unity-container-changelog\">Upgrading Unity Container (Changelog)</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Upgrading Unity Container (Changelog)","uid":"Article.Change.Log","updated_at":"2019-04-24 10:53 PM","wordCount":1670},{"url":"/articles/design/","path":"articles/design/index.html","source_path":"articles/design.md","locale":"en-us","canonical_url":"https:///en-us/articles/design/","conceptual":"\n<p>Unity was designed to achieve the following goals:</p>\n<ul>\n<li>Promote the principles of modular design through aggressive decoupling.</li>\n<li>Maximize testability when designing applications.</li>\n<li>Provide a fast and lightweight dependency injection platform for creating new as well as managing existing objects.</li>\n<li>Expose a compact and intuitive API for developers to work with.</li>\n<li>Support a wide range of languages, and platforms.</li>\n<li>Allow attribute-driven injection for constructors, properties, fields, and methods.</li>\n<li>Provide extensibility through container extensions.</li>\n<li>Provide stability required in enterprise-level line of business (LOB) applications.</li>\n</ul>\n<p>To allow maximum flexibility Unity container split into <strong>core</strong> and <strong>extension</strong> packages. Core packages implement basic <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" data-linktype=\"external\">IoC</a>/<a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" data-linktype=\"external\">DI</a> functionality and extensions provide specific behavior such as configuration, decoration, and etc.</p>\n<h2 id=\"unity-core\">Unity Core</h2>\n<p>Unity core consists of two assemblies:</p>\n<ul>\n<li><code>Unity.Abstractions</code></li>\n<li><code>Unity.Container</code></li>\n</ul>\n<p><code>Unity.Abstractions</code> assembly contains all public declarations required to use the container in applications and relatively unchanged from version to version. It defines <a href=\"xref:Unity.IUnityContainer\" data-linktype=\"external\">IUnityContainer</a> interface as well as types and interfaces used to register, configure and resolve types and instances.</p>\n<p><code>Unity.Container</code> assembly implements the IoC engine and exposes public members required to extend the container.</p>\n<h3 id=\"core-packages\">Core Packages</h3>\n<p>For legacy support and general convenience core library is distributed in two different forms:</p>\n<ul>\n<li>as composite package <a href=\"https://www.nuget.org/packages/Unity/\" data-linktype=\"external\">Unity</a></li>\n<li>as independent packages <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a> and <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Unity.Container</a></li>\n</ul>\n<h4 id=\"composite-package-unity\">Composite package <a href=\"https://www.nuget.org/packages/Unity/\" data-linktype=\"external\">Unity</a></h4>\n<p>This is a convenience package containing both <code>Unity.Abstractions</code> as well as <code>Unity.Container</code> assemblies. This package is distributed to support legacy applications.</p>\n<h4 id=\"independent-packages-unityabstractions-and-unitycontainer\">Independent Packages <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a> and <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Unity.Container</a></h4>\n<p>To allow easier path to upgrade and maximum decoupling between declarative part and implementation, Unity split into two assemblies: <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a> and <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Unity.Container</a></p>\n<p>When used in libraries it allows linking to Unity.Abstractions and referencing Unity.Container only in bootstrapping project.</p>\n<h2 id=\"unity-extensions\">Unity Extensions</h2>\n<p>Unity project implements and distributes several extensions such as Unity.Configuration, Unity.Interception, <a href=\"https://www.nuget.org/packages?q=unitycontainer\" data-linktype=\"external\">and etc.</a></p>\n<h2 id=\"more-information\">More Information</h2>\n<p>For more information about using packages inside applications see <a href=\"../application/\" data-linktype=\"relative-path\">Application Design</a> concepts with Unity.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/design.md","depot_name":".","document_id":"b362c72d-351a-f2e3-9457-72d6818c97c0","document_version_independent_id":"50caf97e-a047-7f49-3a23-3b57ba420d7b","gitcommit":"https://github.com/unitycontainer/documentation/blob/6a49e6e6bf793ca22cb92d5313c37eea597c589a/articles/design.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/design.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/design.md","rawTitle":"<h1 id=\"design-of-unity\">Design of Unity</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Design of Unity","uid":"Article.Unity.Design","updated_at":"2019-11-25 08:32 PM","wordCount":301},{"url":"/articles/features/","path":"articles/features/index.html","source_path":"articles/features.md","locale":"en-us","canonical_url":"https:///en-us/articles/features/","conceptual":"\n<h2 id=\"general-features\">General Features</h2>\n<ul>\n<li>No registration required for simple POCO types</li>\n<li>Registration/updates at any time (no builder required)</li>\n<li>Support registration metadata</li>\n<li>Support generic types</li>\n<li>Register existing objects</li>\n<li>Custom Type factories</li>\n<li>Register Type</li>\n<li>List all registrations</li>\n<li>Check existing registrations</li>\n</ul>\n<h2 id=\"setup\">Setup</h2>\n<ul>\n<li>Registration\n<ul>\n<li>Type mappings\n<ul>\n<li>Register as a <code>Type</code></li>\n<li>Support <code>Type</code> polymorphism</li>\n<li>Register as an implemented interface</li>\n<li>Multiple interfaces of the same <code>Type</code></li>\n</ul>\n</li>\n<li>Register Type\n<ul>\n<li>Constructor selection\n<ul>\n<li>Constructor marked by attribute</li>\n<li>'Smart' constructor selection\n<ul>\n<li>Longest constructor Unity can satisfy with parameters (dynamic)</li>\n<li>Legacy longest constructor (Extension)</li>\n</ul>\n</li>\n<li>Specific constructor (Injection Member)\n<ul>\n<li>By types of parameters</li>\n<li>By injected members</li>\n<li>By provided values</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Initializing Properties\n<ul>\n<li>Marked with attribute</li>\n<li>Injected during registration (Injection Member)</li>\n</ul>\n</li>\n<li>Initializing Fields\n<ul>\n<li>Marked with attribute</li>\n<li>Injected during registration (Injection Member)</li>\n</ul>\n</li>\n<li>Calling Methods on the object\n<ul>\n<li>Marked with attribute</li>\n<li>Injected during registration (Injection Member)\n<ul>\n<li>By types of parameters</li>\n<li>By injected members</li>\n<li>By provided values</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Registrations Collection\n<ul>\n<li>List registrations of the container</li>\n<li>Support registration hierarchies</li>\n</ul>\n</li>\n<li>Check if <code>Type</code> is registered\n<ul>\n<li>Fast and efficient algorithm</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"execution\">Execution</h2>\n<h3 id=\"initialization-of-existing-objects-buildup\">Initialization of existing objects (BuildUp)</h3>\n<ul>\n<li>Perform initialization on already created objects</li>\n<li>Follow the same pattern as create (Resolve) object</li>\n<li>Compatible with Activator and Compiled pipelines</li>\n<li>Initialize Properties and Fields</li>\n<li>Call Methods and inject parameters</li>\n</ul>\n<h3 id=\"create-instances-resolve\">Create Instances (Resolve)</h3>\n<ul>\n<li>Inject constructor with parameters</li>\n<li>Initialize Properties and Fields</li>\n<li>Call Methods and injects parameters</li>\n<li>Support Activator pipelines</li>\n<li>Create optimized (compiled) pipelines</li>\n<li>Seamlessly resolve registered instances or creates new objects</li>\n<li>Built-in support for deferred resolution\n<ul>\n<li><code>Func&lt;T&gt;</code></li>\n<li><code>Lazy&lt;T&gt;</code></li>\n</ul>\n</li>\n<li>Built-in support for collections\n<ul>\n<li><code>T[]</code></li>\n<li><code>IEnumerable&lt;T&gt;</code></li>\n</ul>\n</li>\n<li>Automatic concrete types resolution</li>\n<li>Dependency injection\n<ul>\n<li>Required</li>\n<li>Optional</li>\n<li>Supports Default parameters</li>\n<li>Injects with resolved parameters</li>\n<li>Injects with registered values</li>\n<li>Supports parameter overrides</li>\n</ul>\n</li>\n<li>Open-generic types\n<ul>\n<li>constraints</li>\n<li>variance</li>\n<li>nested</li>\n<li>recurring generic definitions</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"manages-lifetime-of-objects\">Manages lifetime of objects</h3>\n<ul>\n<li>Transient</li>\n<li>Singleton</li>\n<li>Per Container</li>\n<li>Per Container Transient</li>\n<li>Hierarchical</li>\n<li>External</li>\n<li>Per Thread</li>\n<li>Per Resolve</li>\n<li>Other (Extension)</li>\n</ul>\n<h3 id=\"create-child-scoped-containers\">Create child (Scoped) containers</h3>\n<ul>\n<li>Create disposable child containers (scopes)</li>\n</ul>\n<h2 id=\"extensibility\">Extensibility</h2>\n<h3 id=\"diagnostic\">Diagnostic</h3>\n<ul>\n<li>Registration</li>\n<li>Injection Attribute</li>\n<li>Stack Overflow</li>\n<li>Cyclic reference</li>\n</ul>\n<h3 id=\"legacy\">Legacy</h3>\n<ul>\n<li>Legacy constructor selection</li>\n</ul>\n<h3 id=\"functionality\">Functionality</h3>\n<ul>\n<li>Configuration</li>\n<li>Interception</li>\n<li>Logging</li>\n<li>Web</li>\n<li>Etc.</li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/features.md","depot_name":".","document_id":"7e5161f5-b147-7283-ad4e-24b92f86aa94","document_version_independent_id":"d27ff859-57d2-8956-ce66-c2138968998c","gitcommit":"https://github.com/unitycontainer/documentation/blob/df7803bd64e560cd90a37d21d4db0bd5c1cdc503/articles/features.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/features.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/features.md","rawTitle":"<h1 id=\"features\">Features</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Features","uid":"Article.Unity.Features","updated_at":"2019-03-22 10:10 PM","wordCount":313},{"url":"/articles/history/","path":"articles/history/index.html","source_path":"articles/history.md","locale":"en-us","canonical_url":"https:///en-us/articles/history/","conceptual":"\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Year</th>\n<th style=\"text-align: center;\">Release</th>\n<th style=\"text-align: left;\">Authors and Contributors</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: center;\"></td>\n<td style=\"text-align: left;\"></td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">October 2017</td>\n<td style=\"text-align: center;\">Unity 5</td>\n<td style=\"text-align: left;\">GitHub Community Site</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">October 2015</td>\n<td style=\"text-align: center;\">Unity 4</td>\n<td style=\"text-align: left;\">GitHub Community Site</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">April 2014</td>\n<td style=\"text-align: center;\"><a href=\"https://archive.codeplex.com/?p=unity\" data-linktype=\"external\">Unity 3.5</a></td>\n<td style=\"text-align: left;\">CodePlex Community Site</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">April 2013</td>\n<td style=\"text-align: center;\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn170416(v%3dpandp.10)\" data-linktype=\"external\">Unity 3</a></td>\n<td style=\"text-align: left;\">CodePlex Community Site</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Aug 2012</td>\n<td style=\"text-align: center;\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/hh237492(v%3dpandp.10)\" data-linktype=\"external\">Unity 2.1</a></td>\n<td style=\"text-align: left;\">CodePlex Community Site</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">April 2010</td>\n<td style=\"text-align: center;\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff663144(v%3dpandp.10)\" data-linktype=\"external\">Unity 2.0</a></td>\n<td style=\"text-align: left;\">Grigori Melnik, Bob Brumfield, Chris Tavares, Fernando Simonazzi, Nicolas Botto, Olaf Conijn, Carlos Farre, Masashi Narumoto, Rohit Sharma, Lavanya Selvaraj, Magdelene Sona, Mani Krishnaswami, Meenakshi Krishnamoorthi, Santhosh Panneerselvam, Ravindra Varman, Erik Renaud, FranÃ§ois Tanguay, Rick Carr, Alex Homer, Dennis DeWitt, RoAnn Corbisier, Steve Elston, Nancy Michel, Patrick Lanfear, Tom Draper, Richard Burte, Jennifer Burch, Tracy Emory</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">October 2008</td>\n<td style=\"text-align: center;\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff647347(v%3dpandp.10)\" data-linktype=\"external\">Unity Application Block 1.2</a></td>\n<td style=\"text-align: left;\">Grigori Melnik, Chris Tavares, Fernando Simonazzi, Vijaya Janakiraman, Carlos Farre, Dennis DeWitt, Alex Homer, Nelly Delgado, RoAnn Corbisier, Tina Burden McGrayne, Richard Burte</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">May 2008</td>\n<td style=\"text-align: center;\"><a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff649080(v%3dpandp.10)\" data-linktype=\"external\">Unity Application Block 1.1</a></td>\n<td style=\"text-align: left;\">Grigori Melnik, Scott Densmore, William Loeffler, Chris Tavares, Fernando Simonazzi, Nicolas Botto, Hanz Zhang, Carlos Farre, Naveen Guda, Pooja Parate, Pravin Pawar, Ronita Acharya, Sai Pasumarthi, Venkata Appaji Sirangi, Vijaya Janakiraman, Alex Homer, Nelly Delgado, RoAnn Corbisier, Tina Burden McGrayne</td>\n</tr>\n</tbody>\n</table>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/history.md","depot_name":".","document_id":"a4e26158-c7cf-11a1-7e12-8fa419b1f274","document_version_independent_id":"3efb1167-e235-dd99-e5dd-5db9dde70f26","gitcommit":"https://github.com/unitycontainer/documentation/blob/8a5e5548aca3d3a178c32f6a6b4cc98de7f982a0/articles/history.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/history.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/history.md","rawTitle":"<h1 id=\"the-unity-container-history\">The Unity Container History</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"The Unity Container History","uid":"Article.Unity.History","updated_at":"2019-03-16 08:42 PM","wordCount":175},{"url":"/articles/installation/","path":"articles/installation/index.html","source_path":"articles/installation.md","locale":"en-us","canonical_url":"https:///en-us/articles/installation/","conceptual":"\n<p>Unity is designed to support a range of common scenarios for resolving instances of objects that, themselves, depend on other objects or services. However, you must first prepare your application to use Unity. The following procedure describes how to include the necessary assemblies and elements in your code.</p>\n<h2 id=\"to-prepare-your-application\">To prepare your application</h2>\n<p>Before you can add Unity to your solution you need to decide if you want to reference packages individually (<a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Abstractions</a>, <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Container</a>) or use composite <a href=\"https://www.nuget.org/packages/Unity\" data-linktype=\"external\">Unity</a> package.</p>\n<h3 id=\"referencing-composite-package\">Referencing composite package</h3>\n<p>Referencing single <a href=\"https://www.nuget.org/packages/Unity/\" data-linktype=\"external\">Unity</a> package is more appropriate in case of small(ish) project, when everything is contained within one solution. Upgrading such solution is trivial with the help of NuGet Manager.</p>\n<h3 id=\"referencing-individual-packages\">Referencing individual packages</h3>\n<p>Main benefit of referencing <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Abstractions</a> and <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Container</a> packages individually is when it is used in large project spanning multiple solutions, modules, and project files.</p>\n<p>Normally modular systems have one main application/module with boot-loader responsible for initializing environment, and number of modules loaded by it (<a href=\"https://prismlibrary.github.io/\" data-linktype=\"external\">Prism library</a> for example). This boot loader is required to reference both <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Abstractions</a> and <a href=\"https://www.nuget.org/packages/Unity.Container/\" data-linktype=\"external\">Container</a> packages.</p>\n<p>In such systems modules are created and distributed by various teams and departments and synchronization between these might be a challenge. This is where Unity comes in.\nAs stated elsewhere on this site <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a> contains all declarations required by Unity to operate. Because of that modules could only reference one assembly: <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a></p>\n<p>This separation allows updates of patched container's engine without recompiling all the modules used in the system. Given that specifications change very infrequently and <a href=\"https://www.nuget.org/packages/Unity.Abstractions/\" data-linktype=\"external\">Unity.Abstractions</a> package stays the same most of the time it provides big benefit in terms of saved development/testing time and money.</p>\n<h2 id=\"adding-unity-to-project\">Adding Unity to project</h2>\n<p>Unity container is distributed via NuGet and could be added to a project with the help of NuGet manager or by executing command:</p>\n<pre><code class=\"lang-bash\">Install-Package Unity\n\nor\n\nInstall-Package Unity.Abstractions\nInstall-Package Unity.Container\n</code></pre>\n<p>If you wish to use <a href=\"https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#floating-versions\" data-linktype=\"external\">Floating Version references</a> it is recommended to lock in the minor and major versions and only allow patch version to slide:</p>\n<pre><code class=\"lang-js\">&lt;PackageReference Include=&quot;Unity.Container&quot; Version=&quot;5.9.*&quot; /&gt;\n</code></pre>\n<p>doing so will guarantee that no breaking change caught you of guard.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/installation.md","depot_name":".","document_id":"f2c12317-d328-78fd-cc78-8bf80690406d","document_version_independent_id":"623501b4-0f80-ff38-3a41-051d28f127a9","gitcommit":"https://github.com/unitycontainer/documentation/blob/a08c5cd38778dbc7606660e730b63c1a6800daf1/articles/installation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/installation.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/installation.md","rawTitle":"<h1 id=\"adding-unity-to-your-application\">Adding Unity to Your Application</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Adding Unity to Your Application","uid":"Article.Unity.Install","updated_at":"2019-03-04 02:14 AM","wordCount":347},{"url":"/articles/introduction/","path":"articles/introduction/index.html","source_path":"articles/introduction.md","locale":"en-us","canonical_url":"https:///en-us/articles/introduction/","conceptual":"\n<h2 id=\"overview\">Overview</h2>\n<p>Unity Container is a full featured, general-purpose <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" data-linktype=\"external\">IoC container</a> for use in any type of .NET application. It is <a href=\"https://en.wikipedia.org/wiki/Open_source\" data-linktype=\"external\">Open Source</a> and released under <a href=\"https://github.com/unitycontainer/unity/blob/master/LICENSE\" data-linktype=\"external\">Apache 2.0 license</a>.</p>\n<p>Unity is extensible. Anyone can write an extensions that changes the behavior of the container, or adds new capabilities. For example, the interception feature provided by Unity, which you can use to add policies to objects, is implemented as a container extension.</p>\n<h2 id=\"what-does-unity-do\">What Does Unity Do</h2>\n<p>Apart from decoupling types, components, services, and separating concerns, Unity crates and manages objects. Think of it as operator <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-operator\" data-linktype=\"external\">new ...</a> on steroids.</p>\n<ul>\n<li><a href=\"#the-types-of-objects-unity-can-create\" data-linktype=\"self-bookmark\">The Types of Objects Unity Can Create</a></li>\n<li><a href=\"#registering-types-and-object-instances\" data-linktype=\"self-bookmark\">Registering Existing Types and Object Instances</a></li>\n<li><a href=\"#managing-the-lifetime-of-objects\" data-linktype=\"self-bookmark\">Managing the Lifetime of Objects</a></li>\n<li><a href=\"#specifying-values-for-injection\" data-linktype=\"self-bookmark\">Specifying Values for Injection</a></li>\n<li><a href=\"#populating-collections\" data-linktype=\"self-bookmark\">Populating collections</a></li>\n<li><a href=\"#support-for-deferred-resolution\" data-linktype=\"self-bookmark\">Support for deferred resolution</a></li>\n</ul>\n<h2 id=\"the-types-of-objects-unity-can-create\">The Types of Objects Unity Can Create</h2>\n<p>You can use the Unity container to generate instances of any object that has a public constructor (in other words, objects that you can create using the new operator). During object instantiation Unity can:</p>\n<ul>\n<li>Select appropriate constructor</li>\n<li>Inject constructor with parameters</li>\n<li>Inject public properties with values</li>\n<li>Inject public fields with values</li>\n<li>Call any public method on the created object</li>\n</ul>\n<h3 id=\"registering-types-and-object-instances\">Registering Types and Object Instances</h3>\n<p>Unity can resolve any concrete, constructable reference type without registration. For example calling <code>container.Resolve&lt;object&gt;()</code> will produce an instance immediately.</p>\n<p>Registrations allow mapping between service types and implementation types. Create a blueprint of how instances instantiated, initialized, and managed. For generic types it creates internal mini factories that used to generate concrete types. Unity supports three ways of registering types:</p>\n<h4 id=\"instance-registration\">Instance registration</h4>\n<p>Unity exposes a method named <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_RegisterInstance_System_Type_System_String_System_Object_Unity_Lifetime_IInstanceLifetimeManager_\" data-linktype=\"external\">RegisterInstance</a> that you can use to register existing instances with the container. The instance could be registered as concrete type, a type of the instance you would get by calling <code>instance.GetType()</code>, or it could be registered as any of the interfaces the instance implements. Lifetime of registered instance could be either controlled by container it is registered with or externally, in which case Unity just keeps weak reference to the object.</p>\n<h4 id=\"factory-registration\">Factory registration</h4>\n<p>Method <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_RegisterFactory_System_Type_System_String_System_Func_Unity_IUnityContainer_System_Type_System_String_System_Object__Unity_Lifetime_IFactoryLifetimeManager_\" data-linktype=\"external\">RegisterFactory</a> provides a way to register a factory delegate Unity would call when required to provide the type.</p>\n<h4 id=\"type-registration\">Type registration</h4>\n<p><a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_RegisterType_System_Type_System_Type_System_String_Unity_Lifetime_ITypeLifetimeManager_Unity_Injection_InjectionMember___\" data-linktype=\"external\">RegisterType</a> is a method where you can instruct Unity how to create and initialize objects from scratch. You can specify:</p>\n<ul>\n<li>Constructor to call</li>\n<li>Parameters to pass to the constructor or how to resolve them</li>\n<li>Properties to initialize and how to do it</li>\n<li>Fields to inject and with what</li>\n<li>Methods to call on the created object and parameters to pass to these methods</li>\n<li>Specify how lifetime should be managed</li>\n</ul>\n<h2 id=\"managing-the-lifetime-of-objects\">Managing the Lifetime of Objects</h2>\n<p>Unity allows you to choose the lifetime of the objects it creates. By default, Unity creates a new instance of a type each time you resolve that type. However, you can use different lifetime managers to specify a required lifetime for resolved instances. For example, you can specify that Unity should maintain only a single instance (a singleton). It will create a new instance only if there is no existing instance. If there is an existing instance, it will return a reference to this instead. There are also other lifetime managers you can use.</p>\n<h2 id=\"specifying-values-for-injection\">Specifying Values for Injection</h2>\n<p>Unity allows configurations where dependencies are resolved from the container. But it also provides an easy way to configure injection of values at registration. In other words you could provide values for dependencies to be registered and used during subsequent resolutions.</p>\n<p>Unity also allows overriding of any dependency values during resolution. It could override any configured or resolved value during resolution of the type.</p>\n<h2 id=\"populating-collections\">Populating collections</h2>\n<p>Unity has built-in support for resolving arrays and enumerations of types. For example it would recognize following types as collections and resolve them using proper algorithm:</p>\n<ul>\n<li><code>Resolve&lt;T[]&gt;()</code></li>\n<li><code>Resolve&lt;IEnumerable&lt;T&gt;&gt;()</code></li>\n<li><code>Resolve&lt;List&lt;T&gt;&gt;()</code></li>\n</ul>\n<h2 id=\"support-for-deferred-resolution\">Support for deferred resolution</h2>\n<p>Unity container implements strategies to allow deferred resolution of types. It has two types of deferred resolvers:</p>\n<ul>\n<li><code>Func&lt;T&gt;</code> - Creates factory method which instantiates type <strong>T</strong> on demand.</li>\n<li><code>Lazy&lt;T&gt;</code> - Creates <code>Lazy&lt;T&gt;</code> object and passes it to created type.</li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/introduction.md","depot_name":".","document_id":"edb43f99-5118-5174-37b2-f733fa1abf87","document_version_independent_id":"e3b1d344-8371-7dbc-ed8d-707d380a75d4","gitcommit":"https://github.com/unitycontainer/documentation/blob/6a49e6e6bf793ca22cb92d5313c37eea597c589a/articles/introduction.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/introduction.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/introduction.md","rawTitle":"<h1 id=\"unity-container-introduction\">Unity Container Introduction</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Unity Container Introduction","uid":"Article.Unity.Introduction","updated_at":"2019-11-25 08:32 PM","wordCount":664},{"url":"/articles/quickstart/","path":"articles/quickstart/index.html","source_path":"articles/quickstart.md","locale":"en-us","canonical_url":"https:///en-us/articles/quickstart/","conceptual":"\n<p>This topic describes how to develop applications using Unity, and how to create and build instances of objects. It assumes that you familiar with dependency injection and separation of concerns concepts.</p>\n<h2 id=\"the-container\">The Container</h2>\n<p>Unity exposes very compact API to operate the container. The most operations related to registration, resolution, and lifetime management is exposed through one interface - <strong><a href=\"xref:Unity.IUnityContainer\" data-linktype=\"external\">IUnityContainer</a></strong>.</p>\n<p>To start using Unity you need to create an instance of the container and get reference to <a href=\"xref:Unity.IUnityContainer\" data-linktype=\"external\">IUnityContainer</a> interface:</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\n</code></pre>\n<h2 id=\"creating-instances\">Creating instances</h2>\n<p>Once container is created you could start using it immediately:</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\nvar value = container.Resolve&lt;object&gt;();\n\n// Calling Resolve&lt;object&gt;() is the same as \nvalue = new object(); \n</code></pre>\n<p>It will create any type with accessible constructor. Consider following example:</p>\n<pre><code class=\"lang-cs\">// Simple class Foo\npublic class Foo\n{\n    public Foo() { }\n\n    public Foo(object obj) { }\n\n    public Foo(string id, object obj) { }\n}\n\n// Create container\nIUnityContainer container = new UnityContainer();\n\n// Resolve Foo\nvar value = container.Resolve&lt;Foo&gt;();\n\n// value created with constructor 'Foo(object obj)'\n</code></pre>\n<p><code>Foo</code> is a simple class with three public constructors. When <code>Resolve&lt;Foo&gt;()</code> is called, Unity will evaluate available constructors and select one with longest list of parameters it can satisfy with dependencies. It will create all required dependencies and pass them to selected constructor during initialization.</p>\n<p>In this particular case Unity will select second constructor with parameter <code>obj</code> of type <a href=\"xref:System.Object\" data-linktype=\"external\">Object</a>. Although constructor <code>Foo(string id, object obj)</code> is longer, it has parameter of type <a href=\"xref:System.String\" data-linktype=\"external\">String</a> which is a primitive type. Unity can not create primitive types by itself. If you want to make these available for dependency injection you would need to register them with the container. For Unity to select third constructor <code>Foo(string id, object obj)</code> you need to register string instance with container:</p>\n<pre><code class=\"lang-cs\">// Register string instance\ncontainer.RegisterInstance(&quot;xyz&quot;);\n\n// Resolve Foo\nvar value = container.Resolve&lt;Foo&gt;();\n\n// value created with constructor 'Foo(string id, object obj)'\n</code></pre>\n<p>For more information on how Unity selects members see <a href=\"../../tutorials/composition/selection/selection/\" data-linktype=\"relative-path\">Member Selection</a></p>\n<h2 id=\"type-mapping\">Type Mapping</h2>\n<p>In service oriented architecture contracts are represented by interfaces and components implement these contracts to provide services. Consider these types:</p>\n<pre><code class=\"lang-cs\">// Public service contract\npublic interface IService \n{\n    // Service API\n}\n\n\n// Component implementing the contract\npublic class Component : IService\n{\n    // Some logic here\n}\n\n\n// Service consumer\npublic class Foo\n{\n    public Foo(IService service)\n    {\n        // Some logic here\n    }\n}\n</code></pre>\n<p>In this example we have <code>IService</code> interface defining an API and class <code>Component</code> implementing that API. Type <code>Foo</code> is a consumer of the service and should be injected by container with an instance of the service during initialization.</p>\n<p>If you just call <code>container.Resolve&lt;IService&gt;()</code> it will throw an exception complaining that it can not create an interface of type <code>IService</code>. You need to register a <a href=\"../../tutorials/composition/mapping/mapping/\" data-linktype=\"relative-path\">Type Mapping</a> to instructs Unity how to create service of type <code>IService</code>:</p>\n<pre><code class=\"lang-cs\">// Register mapping between IService and Component\ncontainer.RegisterType&lt;IService, Component&gt;();\n\n// Resolve Foo\nvar value = container.Resolve&lt;Foo&gt;();\n\n// value created with constructor 'Foo(IService service)'\n</code></pre>\n<p>During the resolution, when Unity will try to satisfy dependencies, it will look for a registration for each dependency and will find this mapping. It will create <code>Component</code> and passes it to constructor of <code>Foo</code> as <code>IService</code>.</p>\n<p>For more information see <a href=\"../../tutorials/composition/mapping/mapping/\" data-linktype=\"relative-path\">Type Mapping</a></p>\n<h2 id=\"lifetime\">Lifetime</h2>\n<p>By default Unity creates a new instance every time type is requested. Instances it created are not tracked or managed by the container.</p>\n<pre><code class=\"lang-cs\">// Register mapping between IService and Component\ncontainer.RegisterType&lt;IService, Component&gt;();\n\n// Resolve IService\nvar value1 = container.Resolve&lt;IService&gt;();\nvar value2 = container.Resolve&lt;IService&gt;();\n\n// value1 and value2 are not the same\n</code></pre>\n<p>To enable lifetime management, type needs to be registered with one of the compatible <a href=\"xref:Unity.Lifetime\" data-linktype=\"external\">lifetime managers</a>. Depending on registration type Unity provides three helpers:</p>\n<ul>\n<li><a href=\"xref:Unity.TypeLifetime\" data-linktype=\"external\">TypeLifetime</a></li>\n<li><a href=\"xref:Unity.InstanceLifetime\" data-linktype=\"external\">InstanceLifetime</a></li>\n<li><a href=\"xref:Unity.FactoryLifetime\" data-linktype=\"external\">FactoryLifetime</a></li>\n</ul>\n<p>For example, to make <code>IService</code> a singleton for the entire application and create it only once you would register it like this:</p>\n<pre><code class=\"lang-cs\">// Register mapping between IService and Component\ncontainer.RegisterType&lt;IService, Component&gt;(TypeLifetime.Singleton);\n\n// Resolve IService\nvar value1 = container.Resolve&lt;IService&gt;();\nvar value2 = container.Resolve&lt;IService&gt;();\n\n// value1 and value2 are the same instance of Component\n</code></pre>\n<p>For more information see <a href=\"../../tutorials/lifetime/lifetime/\" data-linktype=\"relative-path\">Lifetime Management</a></p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/quickstart.md","depot_name":".","document_id":"1eb2a883-aa19-c5b5-593b-d6b67c1546f6","document_version_independent_id":"3c85a775-179c-fd58-72d6-437a7041a3f0","gitcommit":"https://github.com/unitycontainer/documentation/blob/ba6c8d58ec404ad0451d4a77b857483b11fc2a78/articles/quickstart.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/articles/quickstart.md","original_content_git_url_template":"{repo}/blob/{branch}/articles/quickstart.md","rawTitle":"<h1 id=\"using-unity-in-applications\">Using Unity in Applications</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Using Unity in Applications","uid":"Article.Unity.Using","updated_at":"2019-04-30 01:18 AM","wordCount":674},{"url":"/articles/toc.json","path":"articles/toc.json","source_path":"articles/toc.yml","locale":"en-us"},{"url":"/","path":"index.html","source_path":"index.md","locale":"en-us","canonical_url":"https:///en-us/","conceptual":"\n<h2 id=\"overview\">Overview</h2>\n<p>The Unity Container (Unity) is a lightweight, extensible dependency injection container. It facilitates building loosely coupled applications and provides developers with the following advantages:</p>\n<ul>\n<li>Simplified object creation, especially for hierarchical object structures and dependencies</li>\n<li>Abstraction of requirements; this allows developers to specify dependencies at run time or in configuration and simplify management of crosscutting concerns</li>\n<li>Increased flexibility by deferring component configuration to the container</li>\n<li>Service location capability; this allows clients to store or cache the container</li>\n<li>Instance and type interception</li>\n<li>Registration by convention</li>\n</ul>\n<h2 id=\"issues-and-contributions\">Issues and Contributions</h2>\n<ul>\n<li>If something is broken and you know how to fix it, send a pull request.</li>\n<li>If you have no idea what is wrong, create an issue</li>\n</ul>\n<h2 id=\"any-feedback-and-contributions-are-welcome\">Any feedback and contributions are welcome</h2>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/index.md","depot_name":".","document_id":"b3c1f04b-5bdb-1c10-5237-024cf382b4cc","document_version_independent_id":"a79c6ec2-6514-508d-7d8a-5afe2098424f","gitcommit":"https://github.com/unitycontainer/documentation/blob/16b05445e1104378b26179a5de654cade919d174/index.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/index.md","original_content_git_url_template":"{repo}/blob/{branch}/index.md","rawTitle":"<h1 id=\"welcome-to-unity-container-documentation\">Welcome to Unity Container Documentation</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Welcome to Unity Container Documentation","updated_at":"2019-03-16 11:50 PM","wordCount":119},{"url":"/readme/","path":"readme/index.html","source_path":"README.md","locale":"en-us","canonical_url":"https:///en-us/readme/","conceptual":"<p><a href=\"https://ci.appveyor.com/project/unitycontainer/documentation\" data-linktype=\"external\"><img src=\"https://ci.appveyor.com/api/projects/status/50hjsoi3gqu1becr?svg=true\" alt=\"Build status\" data-linktype=\"external\"></a></p>\n<h1 id=\"unity-documentation\">Unity Documentation</h1>\n<p>This repository hosts source files and instructions for building Unity documentation site: <a href=\"https://unitycontainer.github.io\" data-linktype=\"external\">https://unitycontainer.github.io</a></p>\n<p>If you'd like to contribute documentation or report an issue please do it in <a href=\"https://github.com/unitycontainer/documentation\" data-linktype=\"external\">this repository</a>.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/README.md","depot_name":".","document_id":"fa044e91-957c-6e6a-c3ea-f34d2312c709","document_version_independent_id":"394d5e5a-5a94-224f-1e9d-b5f0091e3023","gitcommit":"https://github.com/unitycontainer/documentation/blob/5792a5d4ced17c39833a82a94f817173edd8b1e8/README.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/README.md","original_content_git_url_template":"{repo}/blob/{branch}/README.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Unity Documentation","updated_at":"2019-04-24 11:00 PM","wordCount":31},{"url":"/specs/constructor/","path":"specs/constructor/index.html","source_path":"specs/constructor.md","locale":"en-us","canonical_url":"https:///en-us/specs/constructor/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/constructor.md","depot_name":".","document_id":"9126e7af-2f05-1f78-b222-208d57a3bbb1","document_version_independent_id":"4409ebf6-cdc5-f9d9-28e6-71bf0dc9ec0d","gitcommit":"https://github.com/unitycontainer/documentation/blob/e172c00bcb414f0015d79f080e3f6378a7b8d8e7/specs/constructor.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/constructor.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/constructor.md","rawTitle":"<h1 id=\"constructor-invocation-specification\">Constructor Invocation Specification</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Constructor Invocation Specification","uid":"Specification.Constructor","updated_at":"2019-03-05 04:11 AM","wordCount":0},{"url":"/specs/field/","path":"specs/field/index.html","source_path":"specs/field.md","locale":"en-us","canonical_url":"https:///en-us/specs/field/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/field.md","depot_name":".","document_id":"21325644-f894-73be-1ffe-22351adaad7b","document_version_independent_id":"532ca89a-e39a-c516-ca5b-83cc77530ab6","gitcommit":"https://github.com/unitycontainer/documentation/blob/e172c00bcb414f0015d79f080e3f6378a7b8d8e7/specs/field.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/field.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/field.md","rawTitle":"<h1 id=\"field-injection-specification\">Field Injection Specification</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Field Injection Specification","uid":"Specification.Field","updated_at":"2019-03-05 04:11 AM","wordCount":0},{"url":"/specs/hierarchy/","path":"specs/hierarchy/index.html","source_path":"specs/hierarchy.md","locale":"en-us","canonical_url":"https:///en-us/specs/hierarchy/","conceptual":"","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/hierarchy.md","depot_name":".","document_id":"cf95aa64-1190-5120-381c-3c4424395527","document_version_independent_id":"defd991b-323a-be9a-4b2f-89bdff23d53f","gitcommit":"https://github.com/unitycontainer/documentation/blob/e172c00bcb414f0015d79f080e3f6378a7b8d8e7/specs/hierarchy.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/hierarchy.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/hierarchy.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","updated_at":"2019-03-05 04:11 AM","wordCount":0},{"url":"/specs/method/","path":"specs/method/index.html","source_path":"specs/method.md","locale":"en-us","canonical_url":"https:///en-us/specs/method/","conceptual":"\n<p>Method invocation is an optional step you can add to the created object's initialization. Any accessible method could be invoked, provided Unity can satisfy all the parameters with appropriate values.</p>\n<h2 id=\"supported-methods\">Supported Methods</h2>\n<p>Any accessible method of constructed type can be invoked during initialization.</p>\n<p>Multiple methods can be configured for invokation.</p>\n<h3 id=\"generic-methods\">Generic methods</h3>\n<p>Only closed generic methods can be invoked during initialization.</p>\n<h2 id=\"restrictions\">Restrictions</h2>\n<h3 id=\"static-methods-cannot-be-invoked\">Static methods cannot be invoked</h3>\n<p>Unity does not support invocation of static methods.</p>\n<h3 id=\"methods-with-ref-or-out-parameters-cannot-be-invoked\">Methods with <code>ref</code> or <code>out</code> parameters cannot be invoked</h3>\n<p>Invoking methods containing <code>ref</code> or <code>out</code> parameters is not supported.</p>\n<h3 id=\"invoking-private-and-protected-methods-is-not-allowed\">Invoking <code>private</code> and <code>protected</code> methods is not allowed</h3>\n<p>Although it is technically possible to call <code>private</code> and <code>protected</code> methods of the class, Unity does not support this feature. This restriction is implemented to impose consistency with accessibility principles of <code>C#</code> language.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/method.md","depot_name":".","document_id":"f07424a8-34d7-92fa-61b3-a4e680ff7cbc","document_version_independent_id":"8efce70f-f741-dcef-7f20-e6b8d20c4c96","gitcommit":"https://github.com/unitycontainer/documentation/blob/e172c00bcb414f0015d79f080e3f6378a7b8d8e7/specs/method.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/method.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/method.md","rawTitle":"<h1 id=\"method-invocation\">Method Invocation</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Method Invocation","uid":"Specification.Method","updated_at":"2019-03-05 04:11 AM","wordCount":135},{"url":"/specs/property/","path":"specs/property/index.html","source_path":"specs/property.md","locale":"en-us","canonical_url":"https:///en-us/specs/property/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/property.md","depot_name":".","document_id":"339f73ff-b58d-aa2b-9b70-0699fe989112","document_version_independent_id":"4ee9895a-57be-0951-3adc-89b15a05f315","gitcommit":"https://github.com/unitycontainer/documentation/blob/e172c00bcb414f0015d79f080e3f6378a7b8d8e7/specs/property.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/property.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/property.md","rawTitle":"<h1 id=\"property-injection-specification\">Property Injection Specification</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Property Injection Specification","uid":"Specification.Property","updated_at":"2019-03-05 04:11 AM","wordCount":0},{"url":"/specs/specification/","path":"specs/specification/index.html","source_path":"specs/specification.md","locale":"en-us","canonical_url":"https:///en-us/specs/specification/","conceptual":"\n<h2 id=\"1-introduction\">1 Introduction</h2>\n<p>Unity is a full featured, general-purpose container for use in any type of MicrosoftÂ® .NET Framework-based application. It provides all of the features commonly found in dependency injection implementations.</p>\n<p>In addition, Unity is extensible. You can write container extensions that change the behavior of the container, or add new capabilities. For example, the interception feature provided by Unity, which you can use to add policies to objects, is implemented as a container extension.</p>\n<h2 id=\"2-terms-and-definitions\">2 Terms and Definitions</h2>\n<h3 id=\"21-injection\">2.1 Injection</h3>\n<h3 id=\"22-dependency\">2.2 Dependency</h3>\n<h3 id=\"23-contract\">2.3 Contract</h3>\n<ul>\n<li>Type</li>\n<li>Name</li>\n</ul>\n<h3 id=\"24-metadata\">2.4 Metadata</h3>\n<h3 id=\"25-lifetime\">2.5 Lifetime</h3>\n<h2 id=\"3-workflow\">3 Workflow</h2>\n<h3 id=\"setup\">Setup</h3>\n<p>Before container could be used it should be prepared for operation.</p>\n<h4 id=\"creating-container\">Creating Container</h4>\n<h5 id=\"root\">Root</h5>\n<h5 id=\"scopes\">Scopes</h5>\n<h4 id=\"type-contracts\">Type Contracts</h4>\n<h5 id=\"implicit\">Implicit</h5>\n<h5 id=\"mapping\">Mapping</h5>\n<h5 id=\"explicit\">Explicit</h5>\n<ul>\n<li>Instance</li>\n<li>Factory</li>\n<li>Type</li>\n</ul>\n<h3 id=\"provide-services\">Provide Services</h3>\n<h4 id=\"locate-contract\">Locate Contract</h4>\n<h5 id=\"existing\">Existing</h5>\n<h5 id=\"hierarchical\">Hierarchical</h5>\n<h5 id=\"none\">None</h5>\n<h6 id=\"create-locally\">Create Locally</h6>\n<h6 id=\"with-the-registration\">With the registration</h6>\n<h6 id=\"at-the-root\">At the root</h6>\n<h4 id=\"execute-contract\">Execute contract</h4>\n<h5 id=\"from-lifetime-manager\">From lifetime manager</h5>\n<h5 id=\"from-pipeline\">From pipeline</h5>\n<h3 id=\"manage-created-objects\">Manage created objects</h3>\n<h3 id=\"teardown\">Teardown</h3>\n<h4 id=\"dispose-child-scopes\">Dispose child scopes</h4>\n<h4 id=\"dispose-managed-objects\">Dispose managed objects</h4>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/specification.md","depot_name":".","document_id":"af1bdcaf-14d5-7e77-0ec5-01d6d1c40baf","document_version_independent_id":"67bda16f-dd4a-fce2-8c4b-7bf7ce6f0edc","gitcommit":"https://github.com/unitycontainer/documentation/blob/fcf3dc0a8e1438e5b0d980be1f7a8ea83ed2efdc/specs/specification.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/specification.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/specification.md","rawTitle":"<h1 id=\"unity-container-specification\">Unity Container Specification</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Unity Container Specification","uid":"Specification.Unity","updated_at":"2019-03-06 11:21 PM","wordCount":149},{"url":"/specs/summary/","path":"specs/summary/index.html","source_path":"specs/summary.md","locale":"en-us","canonical_url":"https:///en-us/specs/summary/","conceptual":"\n<ol>\n<li>Introduction</li>\n<li>Terms and Definitions\n<ol>\n<li>Injection</li>\n<li>Dependency</li>\n<li>Contract\n<ul>\n<li>Type</li>\n<li>Name</li>\n</ul>\n</li>\n<li>Metadata</li>\n<li>Lifetime</li>\n</ol>\n</li>\n<li>Workflow\n<ol>\n<li>Setup\n<ol>\n<li>Creating Container\n<ol>\n<li>Root</li>\n<li>Scopes</li>\n</ol>\n</li>\n<li>Type Contracts\n<ol>\n<li>Implicit</li>\n<li>Mapping</li>\n<li>Explicit\n<ul>\n<li>Instance</li>\n<li>Factory</li>\n<li>Type</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Provide Services\n<ol>\n<li>Locate Contract\n<ol>\n<li>Existing</li>\n<li>Hierarchical</li>\n<li>None\n<ol>\n<li>Create Locally</li>\n<li>With the registration</li>\n<li>At the root</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Execute contract\n<ol>\n<li>From lifetime manager</li>\n<li>From pipeline</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Manage created objects</li>\n</ol>\n</li>\n</ol>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/summary.md","depot_name":".","document_id":"ebc52faa-cf9e-bb28-e329-137befaf18c0","document_version_independent_id":"9271befb-21eb-ce4a-1048-1301c975b0d0","gitcommit":"https://github.com/unitycontainer/documentation/blob/fcf3dc0a8e1438e5b0d980be1f7a8ea83ed2efdc/specs/summary.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/summary.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/summary.md","rawTitle":"<h1 id=\"summary\">Summary</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Summary","uid":"Specification.Summary","updated_at":"2019-03-06 11:21 PM","wordCount":50},{"url":"/specs/toc.json","path":"specs/toc.json","source_path":"specs/toc.yml","locale":"en-us"},{"url":"/specs/workflow/","path":"specs/workflow/index.html","source_path":"specs/workflow.md","locale":"en-us","canonical_url":"https:///en-us/specs/workflow/","conceptual":"\n<p>Before container could be used it should be prepared for operation.</p>\n<h4 id=\"creating-container\">Creating Container</h4>\n<h5 id=\"root\">Root</h5>\n<h5 id=\"scopes\">Scopes</h5>\n<h4 id=\"type-contracts\">Type Contracts</h4>\n<h5 id=\"implicit\">Implicit</h5>\n<h5 id=\"mapping\">Mapping</h5>\n<h5 id=\"explicit\">Explicit</h5>\n<ul>\n<li>Instance</li>\n<li>Factory</li>\n<li>Type</li>\n</ul>\n<h3 id=\"provide-services\">Provide Services</h3>\n<h4 id=\"locate-contract\">Locate Contract</h4>\n<h5 id=\"existing\">Existing</h5>\n<h5 id=\"hierarchical\">Hierarchical</h5>\n<h5 id=\"none\">None</h5>\n<h6 id=\"create-locally\">Create Locally</h6>\n<h6 id=\"with-the-registration\">With the registration</h6>\n<h6 id=\"at-the-root\">At the root</h6>\n<h4 id=\"execute-contract\">Execute contract</h4>\n<h5 id=\"from-lifetime-manager\">From lifetime manager</h5>\n<h5 id=\"from-pipeline\">From pipeline</h5>\n<h3 id=\"manage-created-objects\">Manage created objects</h3>\n<h3 id=\"teardown\">Teardown</h3>\n<h4 id=\"dispose-child-scopes\">Dispose child scopes</h4>\n<h4 id=\"dispose-managed-objects\">Dispose managed objects</h4>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/workflow.md","depot_name":".","document_id":"92912b1a-fce7-7872-3d33-3afd56ebc1eb","document_version_independent_id":"a7106ca5-04de-eed2-29a3-e2b877b19db9","gitcommit":"https://github.com/unitycontainer/documentation/blob/ddaee7af1f7438438cc8e0af39906104a6afe004/specs/workflow.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/specs/workflow.md","original_content_git_url_template":"{repo}/blob/{branch}/specs/workflow.md","rawTitle":"<h3 id=\"setup\">Setup</h3>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Workflow","uid":"Specification.Workflow","updated_at":"2019-03-06 03:02 AM","wordCount":55},{"url":"/toc.json","path":"toc.json","source_path":"toc.yml","locale":"en-us"},{"url":"/tutorials/annotation/annotation/","path":"tutorials/annotation/annotation/index.html","source_path":"tutorials/Annotation/annotation.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/annotation/","conceptual":"\n<p>One of the most useful and powerful techniques when using Unity is to take advantage of dependency injection for the parameters of class constructors and methods, and for the values of fields and properties. This approach allows you to resolve and populate the entire hierarchy of objects used in your application based on type registrations and mappings defined in the container, with the subsequent advantages this offers.</p>\n<p>You can specify constructor, field, property, and method call injection information in configuration or by adding registrations to the container at run time. You can also apply attributes to members of your classes to indicate injection targets. When you resolve these classes through the container, Unity will generate instances of the dependent objects and wire up the injection targets with these instances.</p>\n<h2 id=\"using-injection-attributes\">Using Injection Attributes</h2>\n<p>Normally, Unity performs selection of the constructor automatically by choosing the most complex constructor it can satisfy with dependencies and populating these parameters with resolved values when it constructs the object. In some cases, for various reasons, the constructor could not be selected successfully and container may throw an exception.</p>\n<h3 id=\"constructor-annotation\">Constructor Annotation</h3>\n<p>To disambiguate selection or to override automatic behavior you could specify which constructor Unity should use to construct the object by marking it with <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute.</p>\n<h3 id=\"member-annotation\">Member Annotation</h3>\n<p>Property, field, and method call injections do not occur automatically unless registered with appropriate injection members at run time. To enable automatic member injection for types you can add attributes to the members of your classes to force injection of dependent objects when the target class is resolved.</p>\n<h4 id=\"required-and-optional\">Required and Optional</h4>\n<p>Fields, Properties, and Parameters could be annotated with either <a href=\"xref:Unity.DependencyAttribute\" data-linktype=\"external\">Dependency</a> or <a href=\"xref:Unity.OptionalDependencyAttribute\" data-linktype=\"external\">OptionalDependency</a> attributes to indicate that these require values to be injected. For annotating methods you wish to be called during initialization you could use <a href=\"xref:Unity.InjectionMethodAttribute\" data-linktype=\"external\">InjectionMethod</a></p>\n<p>For more information, see:</p>\n<ul>\n<li><a href=\"../constructor/\" data-linktype=\"relative-path\">Annotating types for <strong>Constructor</strong> invocation</a></li>\n<li><a href=\"../method/\" data-linktype=\"relative-path\">Annotating types for <strong>Method</strong> invocation</a></li>\n<li><a href=\"../parameter/\" data-linktype=\"relative-path\">Annotating <strong>Parameter</strong> for injection</a></li>\n<li><a href=\"../field/\" data-linktype=\"relative-path\">Annotating types for <strong>Field</strong> injection</a></li>\n<li><a href=\"../property/\" data-linktype=\"relative-path\">Annotating types for <strong>Property</strong> injection</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/annotation.md","depot_name":".","document_id":"29642b10-fdb8-4b72-8854-aa787580a1f2","document_version_independent_id":"49daebef-832d-2c5b-99f9-0b1b2cc00ffb","gitcommit":"https://github.com/unitycontainer/documentation/blob/8a5e5548aca3d3a178c32f6a6b4cc98de7f982a0/tutorials/Annotation/annotation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/annotation.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/annotation.md","rawTitle":"<h1 id=\"attributed-injection-model\">Attributed Injection Model</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Attributed Injection Model","uid":"Tutorial.Annotation","updated_at":"2019-03-16 08:42 PM","wordCount":327},{"url":"/tutorials/annotation/constructor/","path":"tutorials/annotation/constructor/index.html","source_path":"tutorials/Annotation/constructor.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/constructor/","conceptual":"\n<p>To select constructors you create through the Unity container, you can use the following three techniques:</p>\n<ul>\n<li><p><a href=\"../../composition/selection/constructor/\" data-linktype=\"relative-path\">Automatic Constructor Injection</a>. With this technique, you allow the Unity container to select a constructor and to satisfy any constructor dependencies defined in parameters of the constructor automatically. For more information see <a href=\"../../composition/selection/constructor/\" data-linktype=\"relative-path\">Automatic Constructor Selection</a>.</p>\n</li>\n<li><p><a href=\"../../registration/type/constructor/constructor/\" data-linktype=\"relative-path\">Constructor Injection using explicit registration</a>. With this technique, you register the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and apply an <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor Member</a> that specifies the dependencies to the registration. For more information see <a href=\"../../registration/type/constructor/constructor/\" data-linktype=\"relative-path\">Constructor Injection</a></p>\n</li>\n<li><p><strong>Annotated Constructor Injection</strong>. With this technique, you apply <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute to one of the class constructors to designate it to be used to instantiate an instance.</p>\n</li>\n</ul>\n<h2 id=\"annotated-constructor-injection\">Annotated Constructor Injection</h2>\n<p>Constructor Injection with Attribute Annotation allows you to apply attributes to the class' constructor designating it for dependency injection. When creating the class, Unity will always (unless explicitly overwritten in Registration) use that constructor. You only need to use this technique when there is more than one constructor in the target type.</p>\n<h3 id=\"annotating-a-constructor\">Annotating a Constructor</h3>\n<p>When a target class contains more than one constructor and the automatic algorithm does not provide desired selection, you may use the <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute to specify the constructor you wish to use for injection.</p>\n<p>Consider the following <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>In this example type <code>Service</code> contains four public constructors. Three of these constructors have one parameter each. A <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> like this creates an ambiguity that Unity could not resolve by itself.</p>\n<div class=\"WARNING\">\n<h5>WARNING</h5>\n<p>During resolution, the container will pick the first constructor it could satisfy with dependencies and will use it. In the example above, it could be any of the three constructors with one parameter.</p>\n</div>\n<p>The container is not trying to validate all available contractors during normal execution.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will throw an exception reporting ambiguous constructors.</p>\n</div>\n<p>Normally, Unity would select the third constructor with three parameters, but by annotating the second constructor with the attribute you force Unity to use it during resolution.</p>\n<h3 id=\"multiple-constructor-annotations\">Multiple Constructor Annotations</h3>\n<p>Annotating multiple constructors with injection parameters is not recommended. Unity is not guaranteed to process constructors in certain order. If multiple constructors are annotated, behavior might change from version to version.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will throw an exception reporting ambiguous constructor annotations.</p>\n</div>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/constructor.md","depot_name":".","document_id":"78a4a31f-8f9d-b1b8-c4d8-5ee0709c8dc8","document_version_independent_id":"f6ecaf01-9c4e-2b5e-7627-55221cde4f1c","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Annotation/constructor.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/constructor.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/constructor.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Annotating Type for Constructor Injection","uid":"Tutorial.Annotation.Constructor","updated_at":"2019-04-05 01:56 AM","wordCount":385},{"url":"/tutorials/annotation/field/","path":"tutorials/annotation/field/index.html","source_path":"tutorials/Annotation/field.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/field/","conceptual":"\n<p>By default Unity does not inject any fields of the classes it creates.</p>\n<p>To enable field injection you need to configure Unity during registration of annotate appropriate fields with dependency attributes. Unity supports two types of field injection:</p>\n<ul>\n<li>Required injection - Unity either satisfies this dependency or throws an exception</li>\n<li>Optional injection - Unity either satisfies this dependency or returns <code>null</code></li>\n</ul>\n<h2 id=\"field-injection\">Field injection</h2>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/field.md","depot_name":".","document_id":"3e5f244d-d6a9-5148-d40d-89c6eb8569f6","document_version_independent_id":"fa6bed51-64f2-74c1-6c10-b4352c0c8e58","gitcommit":"https://github.com/unitycontainer/documentation/blob/ddaee7af1f7438438cc8e0af39906104a6afe004/tutorials/Annotation/field.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/field.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/field.md","rawTitle":"<h1 id=\"annotating-types-for-field-injection\">Annotating types for Field injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Annotating types for Field injection","uid":"Tutorial.Annotation.Field","updated_at":"2019-03-06 03:02 AM","wordCount":63},{"url":"/tutorials/annotation/method/","path":"tutorials/annotation/method/index.html","source_path":"tutorials/Annotation/method.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/method/","conceptual":"\n<p>Method invocation is an optional step you can add to the created object's initialization. Any accessible method could be invoked, provided Unity can satisfy all the parameters with appropriate values.</p>\n<h2 id=\"method-invocation\">Method Invocation</h2>\n<p>To enable method invocation during object initialization you could apply <a href=\"xref:Unity.InjectionMethodAttribute\" data-linktype=\"external\">InjectionMethod</a> attribute to the method you want to be executed.</p>\n<pre><code class=\"lang-cs\">public class Service\n{\n    ...\n    private void PreInitialize(...)\n    {\n        ...\n    }\n\n    [InjectionMethod]\n    public void Initialize(...)\n    {\n        ...\n    }\n\n    public void PostInitialize(...)\n    {\n        ...\n    }\n}\n</code></pre>\n<p>In the example above, attribute <a href=\"xref:Unity.InjectionMethodAttribute\" data-linktype=\"external\">InjectionMethod</a> is applied to method <code>Initialize(...)</code> and the method will be executed immediately after the object is created.</p>\n<h2 id=\"multiple-method-invocation\">Multiple Method Invocation</h2>\n<p>Unity does not place any restrictions on how many methods of the class will be invoked during the initialization. You could mark any and all methods with the attribute and Unity will execute them all:</p>\n<pre><code class=\"lang-cs\">public class Service\n{\n    ...\n\n    [InjectionMethod]\n    public void PreInitialize(...)\n    {\n        ...\n    }\n\n    [InjectionMethod]\n    public void Initialize(...)\n    {\n        ...\n    }\n\n    [InjectionMethod]\n    public void PostInitialize(...)\n    {\n        ...\n    }\n}\n</code></pre>\n<h2 id=\"restrictions\">Restrictions</h2>\n<h3 id=\"static-methods-cannot-be-invoked\">Static methods cannot be invoked</h3>\n<p>Unity does not support invocation of static methods. Static methods annotated with <a href=\"xref:Unity.InjectionMethodAttribute\" data-linktype=\"external\">InjectionMethod</a> attribute will be ignored. If <a href=\"../../extensions/diagnostic/\" data-linktype=\"relative-path\">Unity Diagnostic</a> is enabled, the container will throw an exception when it encounters such an annotation.</p>\n<h3 id=\"methods-with-ref-or-out-parameters-cannot-be-invoked\">Methods with <code>ref</code> or <code>out</code> parameters cannot be invoked</h3>\n<p>Methods containing <code>ref</code> or <code>out</code> parameters cannot be invoked during initialization. The container will throw an exception if encountered these.</p>\n<pre><code class=\"lang-cs\">public class Service\n{\n    [InjectionMethod]  // Error\n    public void Method1(ref object refObject)\n    {\n        ...\n    }\n    ...\n\n    [InjectionMethod]  // Error\n    public void Method2(out object outObject)\n    {\n        ...\n    }\n}\n</code></pre>\n<p>In the example above neither <code>Method1(ref object refObject)</code> nor <code>Method2(out object outObject)</code> should be annotated for invocation. Doing so will create an error condition.</p>\n<h3 id=\"invoking-private-and-protected-methods-is-not-allowed\">Invoking <code>private</code> and <code>protected</code> methods is not allowed</h3>\n<p>Although it is technically possible to call <code>private</code> and <code>protected</code> methods of the class, Unity does not support this feature. This restriction is implemented to impose consistency with accessibility principles of <code>C#</code> language.</p>\n<p>Unity will ignore attributes on non-accessible methods.</p>\n<pre><code class=\"lang-cs\">public class Service\n{\n    ...\n\n    [InjectionMethod]  // Error\n    protected void ProtectedMethod(...)\n    {\n        ...\n    }\n}\n</code></pre>\n<p>In the example above method <code>ProtectedMethod(...)</code> will not be called.</p>\n<p>If <a href=\"../../extensions/diagnostic/\" data-linktype=\"relative-path\">Unity Diagnostic</a> is enabled, the container will throw an exception when it encounters this condition.</p>\n<p>For more information see  <a href=\"../../extensions/diagnostic/\" data-linktype=\"relative-path\">Unity Diagnostic</a>.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/method.md","depot_name":".","document_id":"5ae531df-dce4-5f36-9c71-e384a74e77dc","document_version_independent_id":"f8c80055-fe8e-50ca-9e17-07b04982b1ac","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Annotation/method.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/method.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/method.md","rawTitle":"<h1 id=\"annotating-types-for-method-invocation\">Annotating types for Method invocation</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Annotating types for Method invocation","uid":"Tutorial.Annotation.Method","updated_at":"2019-04-05 01:56 AM","wordCount":368},{"url":"/tutorials/annotation/parameter/","path":"tutorials/annotation/parameter/index.html","source_path":"tutorials/Annotation/parameter.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/parameter/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/parameter.md","depot_name":".","document_id":"f85b065f-2cd0-8da7-c090-a2590a7b6682","document_version_independent_id":"5d0e49be-3a43-6aaf-47d6-fb8c7fed5bc9","gitcommit":"https://github.com/unitycontainer/documentation/blob/3ce1397a639bc01a45da7e6143e5be8bb2e67818/tutorials/Annotation/parameter.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/parameter.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/parameter.md","rawTitle":"<h1 id=\"annotating-constructors-and-methods-for-parameter-injection\">Annotating Constructors and Methods for Parameter Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Annotating Constructors and Methods for Parameter Injection","uid":"Tutorial.Annotation.Parameter","updated_at":"2019-03-04 04:07 AM","wordCount":0},{"url":"/tutorials/annotation/property/","path":"tutorials/annotation/property/index.html","source_path":"tutorials/Annotation/property.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/annotation/property/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/property.md","depot_name":".","document_id":"6814e60e-6ade-f695-88c6-035d214a78dd","document_version_independent_id":"fbdced5a-ca01-4bd7-b80b-69048ade93ef","gitcommit":"https://github.com/unitycontainer/documentation/blob/8a5e5548aca3d3a178c32f6a6b4cc98de7f982a0/tutorials/Annotation/property.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Annotation/property.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Annotation/property.md","rawTitle":"<h1 id=\"annotating-objects-for-property-injection\">Annotating Objects for Property Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Property Injection Annotation","uid":"Tutorial.Annotation.Property","updated_at":"2019-03-16 08:42 PM","wordCount":0},{"url":"/tutorials/composition/buildup/buildup/","path":"tutorials/composition/buildup/buildup/index.html","source_path":"tutorials/Composition/BuildUp/buildup.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/buildup/buildup/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/BuildUp/buildup.md","depot_name":".","document_id":"ac5e69d2-90ac-2ebc-2061-3bd40761c5ed","document_version_independent_id":"8b0dbe0c-bfb5-b68b-f782-5702f0b90f85","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/BuildUp/buildup.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/BuildUp/buildup.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/BuildUp/buildup.md","rawTitle":"<h1 id=\"build-up\">Build Up</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Object Build Up","uid":"Tutorial.BuildUp","updated_at":"2019-04-30 12:00 AM","wordCount":0},{"url":"/tutorials/composition/collections/","path":"tutorials/composition/collections/index.html","source_path":"tutorials/Composition/collections.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/collections/","conceptual":"\n<p>Unity supports creating multiple registration of the same type by adding a name to the registration. It is useful if you want to register different services of the same type. For example, if you have multiple printers and you want them all to be available to consumers you would register them like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance&lt;IPrinter&gt;(printer); // default printer\ncontainer.RegisterInstance&lt;IPrinter&gt;(printer1,   &quot;Office Printer&quot;);\ncontainer.RegisterInstance&lt;IPrinter&gt;(printer2,   &quot;Printer at the deli on the street corner&quot;);\ncontainer.RegisterType&lt;IPrinter, NeighborPrinter&gt;(&quot;Office printer near me&quot;);\n</code></pre>\n<p>When you want to obtain a list of all the registered objects of a specific type, <code>IPrinter</code> in this case, you can use the array <code>T[]</code> or <code>IEnumerable&lt;T&gt;</code> of that type. The difference between array and enumerable resolution is that array only returns named (nondefault name) registrations where enumerable always returns all, named and unnamed registrations.</p>\n<h2 id=\"resolving-array-t\">Resolving array <code>T[]</code></h2>\n<p>When resolving array of a type, Unity will return an array containing only types registered with nondefault (other than <code>null</code>) names. In example above call to <code>Resolve</code> will return array of only three elements:</p>\n<pre><code class=\"lang-cs\">IPrinter[] printers = container.Resolve&lt;IPrinter[]&gt;();\nAssert(3 == printers.Length)\n</code></pre>\n<p>Instance <strong>printer</strong> will not be returned because it was registered with no name.</p>\n<h2 id=\"resolving-ienumerablet\">Resolving <code>IEnumerable&lt;T&gt;</code></h2>\n<p><code>IEnumerable&lt;T&gt;</code> returns an enumerable containing all registrations of type T, including default (with name <code>null</code>) registrations. In example above it will return all four registrations:</p>\n<pre><code class=\"lang-cs\">IPrinter[] printers = container.Resolve&lt;IEnumerable&lt;IPrinter&gt;&gt;();\nAssert(4 == printers.Count())\n</code></pre>\n<h2 id=\"resolving-listt-of-types\">Resolving <code>List&lt;T&gt;</code> of types</h2>\n<p>Unity does not have any special provisions to support <code>List&lt;T&gt;</code> but because <code>List</code> type's longest exposed constructor is</p>\n<pre><code class=\"lang-cs\">public List(IEnumerable&lt;T&gt; items)\n</code></pre>\n<p>Unity is able to resolve <code>List&lt;T&gt;</code>. Consider this example:</p>\n<pre><code class=\"lang-cs\">var printers = container.Resolve&lt;List&lt;IPrinter&gt;&gt;();\nAssert(4 == printers.Count)\n</code></pre>\n<p>Unity creates type <code>List&lt;IPrinter&gt;</code> and during initialization selects longest constructor it can satisfy with dependencies (<code>List(IEnumerable&lt;T&gt; items)</code>). It crates the enumeration and passes it to List constructor. Resulting instance is a list of all registrations of that type.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/collections.md","depot_name":".","document_id":"0884b99e-0a93-edc3-f12f-ad8b3a65a047","document_version_independent_id":"e03b645c-3edf-6832-3486-73089b8efedc","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/collections.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/collections.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/collections.md","rawTitle":"<h1 id=\"resolving-collections-of-objects-of-a-particular-type\">Resolving collections of Objects of a Particular Type</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Collections","uid":"Tutorial.Collections","updated_at":"2019-04-30 12:00 AM","wordCount":300},{"url":"/tutorials/composition/composition/","path":"tutorials/composition/composition/index.html","source_path":"tutorials/Composition/composition.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/composition/","conceptual":"\n<p>Composition is a general term describing creation and initialization of an object. During composition an object is created and initialized with all of its dependencies and initialization methods.</p>\n<p>Since each dependency might have its own dependencies entire dependency graph has to be created and each node has to be initialized in order of priority.</p>\n<p>The Unity container supports two types of composition:</p>\n<h2 id=\"resolution\">Resolution</h2>\n<p>Resolution is a process where an object is built from scratch. In other words, the container is allocating the memory for an object, calls a constructor with all of its dependencies and performs all necessary initialization required by the type. For more information see <a href=\"../resolution/resolution/\" data-linktype=\"relative-path\">Object Resolution</a></p>\n<h2 id=\"building-up\">Building Up</h2>\n<p>Building up is a process where the container does not create an object but initializes already created object. This is useful when an object is part of an infrastructure and author does not have access or control of how these are created.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/composition.md","depot_name":".","document_id":"1457e229-39bc-a777-76a7-92e4438da74e","document_version_independent_id":"31268c2a-a9a6-f73d-3573-58f93512e7b2","gitcommit":"https://github.com/unitycontainer/documentation/blob/2b566771060defc33c61a481b10ffc9c8786eba9/tutorials/Composition/composition.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/composition.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/composition.md","rawTitle":"<h1 id=\"composition\">Composition</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Composition","uid":"Tutorial.Composition","updated_at":"2019-07-31 11:26 AM","wordCount":153},{"url":"/tutorials/composition/generics/deferred/","path":"tutorials/composition/generics/deferred/index.html","source_path":"tutorials/Composition/Generics/deferred.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/generics/deferred/","conceptual":"\n<p>Unity provides a technique to facilitate holding a reference to an object you need, but do not want to construct right away. You wish to defer resolution of the object. Instead of creating a factory for the type and injecting the factory into your class, then using it to create the type you want you can use the .NET standard type Func<t> (C#) or Func(Of T) (Visual Basic) with the Resolve method. This returns a delegate that, when invoked, calls into the container and returns an instance of the specified type (in this case, T).<p>\n<p>You can even create a delegate in this way without creating a registration or mapping for the specified type in the container if you wish. Because the resolve action only takes place when you invoke the delegate, subsequent registrations added to the container are available when the target object is resolved. This means that you can manipulate the registrations and mappings in the container at any point before you resolve the target object (although you can obviously register the type before you create the delegate if you prefer).</p>\n<p>For example, you can create a delegate for a component named MyClass, and then register a mapping for it and perform deferred resolution when required using the following code.</p>\n<pre><code class=\"lang-cs\">// Create a Unity container\nIUnityContainer myContainer = new UnityContainer();\n\n// Create a delegate for the IMyClass interface type\nvar resolver = myContainer.Resolve&lt;Func&lt;IMyClass&gt;&gt;();\n\n// ... other code here...\n\n// Register a mapping for the IMyClass interface to the MyClass type\nmyContainer.RegisterType&lt;IMyClass, MyClass&gt;();\n\n// Resolve the mapped target object\nIMyClass myClassInstance = resolver();\n</code></pre>\n<p>You can use this approach when you resolve the type using the Resolve method, or you can specify the delegate when you configure constructor, property setter, or method call injection. You can also use named (non-default) registrations by including the registration name in the call to the Resolve method and the RegisterType method, just as you would when using these methods for non-deferred resolution.</p>\n<p>In addition, you can use this feature to perform deferred resolution of multiple named registrations, as an alternative to using the ResolveAll method. For example, if you have multiple named registrations for the IMyClass interface to suitable concrete types, you can obtain a collection of the resolved types. The following code illustrates this.</p>\n<pre><code class=\"lang-cs\">// Create a Unity container\nIUnityContainer myContainer = new UnityContainer();\n\n// Create an IEnumerable resolver for the IMyClass interface type\nvar resolver = myContainer.Resolve&lt;Func&lt;IEnumerable&lt;IMyClass&gt;&gt;&gt;();\n\n// ... other code here...\n\n// Register mappings for the IMyClass interface to appropriate concrete types\nmyContainer.RegisterType&lt;IMyClass, FirstClass&gt;(&quot;First&quot;);\nmyContainer.RegisterType&lt;IMyClass, SecondClass&gt;(&quot;Second&quot;);\nmyContainer.RegisterType&lt;IMyClass, ThidClass&gt;(&quot;Third&quot;);\n\n// Resolve a collection of the mapped target objects\nIEnumerable&lt;IMyClass&gt; myClassInstances = resolver();\n</code></pre>\n<p>You can also use the deferred resolver to resolve instance registrations. For example, the following code shows how you can resolve an IEnumerable collection of string values.</p>\n<pre><code class=\"lang-cs\">// Create a Unity container\nIUnityContainer myContainer = new UnityContainer();\n\n// Create an IEnumerable resolver for string instance registrations\nvar resolver = myContainer.Resolve&lt;Func&lt;IEnumerable&lt;string&gt;&gt;&gt;();\n\n// ... other code here...\n\n// Register mappings for the IMyClass interface to appropriate concrete types\nmyContainer.RegisterInstance(&quot;one&quot;, &quot;FirstString&quot;);\nmyContainer.RegisterInstance(&quot;two&quot;, &quot;SecondString&quot;);\nmyContainer.RegisterInstance(&quot;three&quot;, &quot;ThirdString&quot;);\n\n// Resolve a collection of the strings\nIEnumerable&lt;string&gt; myStringInstances = resolver();\n</code></pre>\n</t>","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/deferred.md","depot_name":".","document_id":"a1f92544-a7e3-3af7-c90f-d602719ebcfa","document_version_independent_id":"ec0143ad-09ff-c2bb-f179-d04c151dfa62","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Generics/deferred.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/deferred.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Generics/deferred.md","rawTitle":"<h1 id=\"deferring-the-resolution-of-objects\">Deferring the Resolution of Objects</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Deferred Resolution","uid":"Tutorial.Deferred","updated_at":"2019-04-30 12:00 AM","wordCount":520},{"url":"/tutorials/composition/generics/generics/","path":"tutorials/composition/generics/generics/index.html","source_path":"tutorials/Composition/Generics/generics.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/generics/generics/","conceptual":"\n<p>You resolve generic types in much the same way as you resolve non-generic types. The primary difference is with unbound types. The specification of the type arguments depend on the definition of the mapped type or the type you are resolving:</p>\n<ul>\n<li><p>If the mapped type or the type you are resolving is a <strong>bound</strong> type, you can only resolve an instance of the type using the defined type arguments. For example, if the mapped type has type arguments of type string and DateTime, you must specify these in the call to the Resolve method.</p>\n</li>\n<li><p>If the mapped type or the type you are resolving is an <strong>unbound</strong> type, you can resolve an instance of the type using any types for the type arguments. The target class must be able to process arguments of the type you specify. For example, if one of the type arguments you specify is the type Boolean, the class must be able to handle Boolean values for that argument and not attempt to parse the value into a DateTime instance.</p>\n</li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/generics.md","depot_name":".","document_id":"a92a9f46-f50f-2f68-4bb8-5e7652680910","document_version_independent_id":"4e0f56a0-6763-4bbf-372b-b019b3d8caa4","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Generics/generics.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/generics.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Generics/generics.md","rawTitle":"<h1 id=\"generic-types\">Generic Types</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Generics","uid":"Tutorial.Generics","updated_at":"2019-04-30 12:00 AM","wordCount":174},{"url":"/tutorials/composition/generics/lazy/","path":"tutorials/composition/generics/lazy/index.html","source_path":"tutorials/Composition/Generics/lazy.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/generics/lazy/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/lazy.md","depot_name":".","document_id":"9b5a7104-d6da-4330-733e-273254cf63cf","document_version_independent_id":"4188df6c-93dd-f51a-63be-280e09e8beda","gitcommit":"https://github.com/unitycontainer/documentation/blob/ba6c8d58ec404ad0451d4a77b857483b11fc2a78/tutorials/Composition/Generics/lazy.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/lazy.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Generics/lazy.md","rawTitle":"<h1 id=\"lazy\">Lazy</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Lazy","uid":"Tutorial.Lazy","updated_at":"2019-04-30 01:18 AM","wordCount":0},{"url":"/tutorials/composition/generics/metadata/","path":"tutorials/composition/generics/metadata/index.html","source_path":"tutorials/Composition/Generics/metadata.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/generics/metadata/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/metadata.md","depot_name":".","document_id":"ac43e2ab-6d9a-2ed0-8c89-80b21278762e","document_version_independent_id":"f5d1d529-9ad8-fb0c-2f65-e9f4c3c42474","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Generics/metadata.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Generics/metadata.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Generics/metadata.md","rawTitle":"<h1 id=\"generic-metadata\">Generic Metadata</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Metadata","uid":"Tutorial.Generics.Metadata","updated_at":"2019-04-30 12:00 AM","wordCount":0},{"url":"/tutorials/composition/mapping/generic/","path":"tutorials/composition/mapping/generic/index.html","source_path":"tutorials/Composition/Mapping/generic.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/mapping/generic/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/generic.md","depot_name":".","document_id":"418b01e6-2886-a05c-94d3-2695d8234782","document_version_independent_id":"c730bf6f-c479-0b44-0b51-e7754d3759c9","gitcommit":"https://github.com/unitycontainer/documentation/blob/ba6c8d58ec404ad0451d4a77b857483b11fc2a78/tutorials/Composition/Mapping/generic.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/generic.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Mapping/generic.md","rawTitle":"<h1 id=\"generic-type-mapping\">Generic Type Mapping</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Generic Type Mapping","uid":"Tutorial.Mapping.Generic","updated_at":"2019-04-30 01:18 AM","wordCount":0},{"url":"/tutorials/composition/mapping/implementation/","path":"tutorials/composition/mapping/implementation/index.html","source_path":"tutorials/Composition/Mapping/implementation.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/mapping/implementation/","conceptual":"\n<p>Service to Implementation mapping is done during the service registration.</p>\n<h2 id=\"the-service-itself\">The Service Itself</h2>\n<p>The simplest type of registration is when service is registered by its own type. For Type and Instance registration you could do so by simply registering the type or the instance:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;Foo&gt;();\ncontainer.RegisterInstance(new Foo());\n</code></pre>\n<p>A factory has to specify type it is registered under:</p>\n<pre><code class=\"lang-cs\">container.RegisterFactory&lt;Foo&gt;((c, t, n) =&gt; new Foo());\n</code></pre>\n<h2 id=\"mapping-contract-to-implementation\">Mapping Contract to Implementation</h2>\n<p>When you map Registered type to implementation type you specify an service type first and implementation type second:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IFoo, Foo&gt;();\ncontainer.RegisterInstance&lt;IFoo&gt;(new Foo());\n</code></pre>\n<p>In case of factory registration the container does not care how it is implemented by the factory, all it cares is how it is registered:</p>\n<pre><code class=\"lang-cs\">container.RegisterFactory&lt;IFoo&gt;((c, t, n) =&gt; new Foo());\n</code></pre>\n<h2 id=\"building-and-mapping-to-implementation\">Building and Mapping to Implementation</h2>\n<p>Mapping allows redirection to existing registrations and services as well as building new instances of implementation types.</p>\n<h3 id=\"mapping-to-existing-service\">Mapping to Existing Service</h3>\n<p>The Unity container supports a scenario where a mapping does not crate type itself but rather references existing service registered with the container. Consider the following:</p>\n<pre><code class=\"lang-cs\">public class Foo : IFoo1, IFoo2\n{\n    public Foo()\n    {\n    }\n\n    public Foo(object _)\n    {\n    }\n}\n\ncontainer.RegisterInstance&lt;IFoo&gt;(new Foo(), InstanceLifetime.Singleton);\n\ncontainer.RegisterType&lt;IFoo1, Foo&gt;();\n</code></pre>\n<p>The container has a registration for type <code>Foo</code>. When interface <code>IFoo1</code> is mapped to <code>Foo</code> it instructs the container to resolve the default implementation for the type <code>Foo</code>. Because the mapping does not provide any instructions how the type should be built, the default implementation, or existing registration should be used.</p>\n<p>So, when the container will be resolving <code>IFoo1</code> it will first check if <code>Foo</code> is already registered and will used the registration to satisfy the request.</p>\n<p>If a mapping references non existing service the container will try to build the service from the implementation type.</p>\n<h3 id=\"building-implementation-type\">Building Implementation Type</h3>\n<p>If the implementation type points to no existing registration or if an instance has to be created using certain rules, the container will create a new, independent pipeline and execute. So if you register <code>IFoo2</code> like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IFoo2, Foo&gt;(Invoke.Constructor());\n</code></pre>\n<p>the Unity container will not redirect to <code>Foo</code> but will create a new instance of <code>Foo</code> and call default constructor.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/implementation.md","depot_name":".","document_id":"67e38e86-49da-e80c-aa14-d18939f99491","document_version_independent_id":"6916f8de-fba9-4c35-b3b8-6cc40a8e8412","gitcommit":"https://github.com/unitycontainer/documentation/blob/ba6c8d58ec404ad0451d4a77b857483b11fc2a78/tutorials/Composition/Mapping/implementation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/implementation.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Mapping/implementation.md","rawTitle":"<h1 id=\"service-to-implementation-mapping\">Service to Implementation Mapping</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Service to Implementation Mapping","uid":"Tutorial.Mapping.Implementation","updated_at":"2019-04-30 01:18 AM","wordCount":351},{"url":"/tutorials/composition/mapping/mapping/","path":"tutorials/composition/mapping/mapping/index.html","source_path":"tutorials/Composition/Mapping/mapping.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/mapping/mapping/","conceptual":"\n<p>In service oriented architecture components expose services through well known contracts. In <code>C#</code> terms the contracts are the abstract classes or interfaces these components and services are exposing. So when we say service type, in most of the cases, we mean the interfaces implementing the contract. And the components are called Implementation types.</p>\n<p>Unity allows to publish these components and make all the contracts they implement available to clients to consume. This publishing and &quot;advertisement&quot; is done by registering types and interfaces (contracts) associated with components.</p>\n<h3 id=\"registration-type\">Registration Type</h3>\n<p>Registration type is the type of the 'Contract' this service provides. It could be the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> of the service itself of any of the base types it implements.</p>\n<h3 id=\"service-to-implementation-mapping\">Service To Implementation Mapping</h3>\n<p>The mapping is done when service is registered. Any type of registration (Type, Factory, Instance) allow to associate a service with different contracts.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/mapping.md","depot_name":".","document_id":"114f92db-344c-abca-7962-b9478c9610ee","document_version_independent_id":"ad129655-e31c-3d02-6062-cb5934ae425f","gitcommit":"https://github.com/unitycontainer/documentation/blob/ba6c8d58ec404ad0451d4a77b857483b11fc2a78/tutorials/Composition/Mapping/mapping.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Mapping/mapping.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Mapping/mapping.md","rawTitle":"<h2 id=\"type-mapping\">Type Mapping</h2>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Type Mapping","uid":"Tutorial.Mapping","updated_at":"2019-04-30 01:18 AM","wordCount":143},{"url":"/tutorials/composition/overrides/dependency/","path":"tutorials/composition/overrides/dependency/index.html","source_path":"tutorials/Composition/Overrides/dependency.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/overrides/dependency/","conceptual":"\n<p><a href=\"xref:Unity.Resolution.DependencyOverride\" data-linktype=\"external\">Dependency override</a> is a special kind of override. It does not target any members or parameters. Instead, it overrides a contract that the container would have resolved when requested. In other words, when the dependency is being resolved from the container, if the contract matches, it will provide that value instead.</p>\n<h2 id=\"injected-members-and-dependency-overrides\">Injected Members and Dependency overrides</h2>\n<p>There are two types of dependency injection the Unity container supports:</p>\n<ul>\n<li>Value injection</li>\n<li>Value resolution</li>\n</ul>\n<p>To understand how <a href=\"xref:Unity.Resolution.DependencyOverride\" data-linktype=\"external\">Dependency Override</a> works you need to remember, it only overrides resolved values.</p>\n<h3 id=\"injected-values\">Injected Values</h3>\n<p>Values are injected during <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> registration. At that time you provide instructions on how to initialize the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and its members. The members injected with values via Injection Members will not be affected by the <a href=\"xref:Unity.Resolution.DependencyOverride\" data-linktype=\"external\">Dependency Override</a>.</p>\n<h3 id=\"resolved-values\">Resolved Values</h3>\n<p>All the dependencies that are not injected with values, or injected with resolve redirection are potential targets for the override. Anything that asks the container to resolve a value can be <a href=\"xref:Unity.Resolution.DependencyOverride\" data-linktype=\"external\">Dependency Overridden</a>.</p>\n<h2 id=\"overriding-dependencies\">Overriding dependencies</h2>\n<p><a href=\"xref:Unity.Resolution.DependencyOverride\" data-linktype=\"external\">Dependency Override</a> enables you to specify an override for the specified dependency type contract. It, enables you to pass in an object that will be returned as a dependency, instead of the one resolved from the container.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/dependency.md","depot_name":".","document_id":"a57a3be5-47d3-51c5-f36f-7bb1a351d43f","document_version_independent_id":"7e8b2795-7571-1855-6237-b30f66013643","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Overrides/dependency.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/dependency.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Overrides/dependency.md","rawTitle":"<h1 id=\"dependency-override\">Dependency Override</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Dependency Override","uid":"Tutorial.Resolution.Override.Dependency","updated_at":"2019-04-30 12:00 AM","wordCount":199},{"url":"/tutorials/composition/overrides/field/","path":"tutorials/composition/overrides/field/index.html","source_path":"tutorials/Composition/Overrides/field.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/overrides/field/","conceptual":"\n<p>FieldOverride enables you to override the value for a specified field. Only the field value is overridden, not the properties selected. Its behavior is the same as ParameterOverride. The use of the OnType method enables you to specify a type to constrain the override to.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/field.md","depot_name":".","document_id":"7054362e-ab65-8ef6-cce1-7a89caee8ea0","document_version_independent_id":"f4d61c91-c65f-610e-5706-372bc1405786","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Overrides/field.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/field.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Overrides/field.md","rawTitle":"<h1 id=\"field-override\">Field Override</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Field Overrides","uid":"Tutorial.Resolution.Override.Field","updated_at":"2019-04-30 12:00 AM","wordCount":45},{"url":"/tutorials/composition/overrides/override/","path":"tutorials/composition/overrides/override/index.html","source_path":"tutorials/Composition/Overrides/override.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/overrides/override/","conceptual":"\n<p>The parameter and dependency overrides, ParameterOverride and DependencyOverride, are ResolverOverride implementations that provide support for overriding the registration information for resolving instances of types. When you call the Resolve method, these classes enable you to override values specified when the type was registered, such as by a RegisterType or RegisterInstance statement. In effect, RegisterType supplied values are overridden by Resolve supplied values.</p>\n<p>Use ParameterOverride to override the specified constructor parameter or parameters. The override applies everywhere the parameter appears unless you use OnType to constrain the override to a specified type. Since the purpose of overrides is to affect the resolution of dependencies for all relevant created objects, not just the object requested in the call to Resolve, unconstrained overrides can produce errors if there are unconstrained ParameterOverride parameters that match parameters with the same name but different types on the selected constructors for objects created in a given resolve operation.</p>\n<p>Use PropertyOverride to override the value of the specified property or properties. The override applies everywhere the property appears unless you use OnType to constrain the override to a specified type.</p>\n<p>Use DependencyOverride to override the value injected whenever there is a dependency of the given type. DependencyOverride overrides all instances where the type matches. Both parameter overrides and dependency overrides support generic types and multiple overrides.</p>\n<p>Overrides work with the constructor that is selected for the type, by attribute or configuration. If the constructor to be used is not identified with an attribute or explicit container configuration, then the default behavior is that the constructor with the most parameters will be used.</p>\n<p>A parameter and property override never affects what element gets selected. They only control the value of the specified parameter or property. You do not change which constructor is called with an override, and you do not change which properties get set with an override.</p>\n<ul>\n<li><a href=\"../parameter/\" data-linktype=\"relative-path\">Parameter Overrides</a></li>\n<li><a href=\"../property/\" data-linktype=\"relative-path\">Property Overrides</a></li>\n<li><a href=\"../field/\" data-linktype=\"relative-path\">Field Overrides</a></li>\n<li><a href=\"../dependency/\" data-linktype=\"relative-path\">Dependency Overrides</a></li>\n</ul>\n<p><img src=\"/en-us/images/resolver-override.png\" alt=\"Resolver Override\" data-linktype=\"absolute-path\"></p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/override.md","depot_name":".","document_id":"c6321cd0-ca7d-d962-a1d6-cafd2304b46d","document_version_independent_id":"d81b6079-c1d9-1fb6-de0e-275b2b70cf4a","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Overrides/override.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/override.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Overrides/override.md","rawTitle":"<h1 id=\"overriding-dependencies-during-resolution\">Overriding dependencies during resolution</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Resolution Override","uid":"Tutorial.Resolution.Override","updated_at":"2019-04-30 12:00 AM","wordCount":317},{"url":"/tutorials/composition/overrides/parameter/","path":"tutorials/composition/overrides/parameter/index.html","source_path":"tutorials/Composition/Overrides/parameter.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/overrides/parameter/","conceptual":"\n<p>Unity enables you to pass in values for parameter dependencies to override a parameter passed to a given constructor or method. Only the parameter value is overridden, not the constructor or method selection.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/parameter.md","depot_name":".","document_id":"ba453611-c12b-550a-6561-07b81942e916","document_version_independent_id":"8aeb5e95-0a66-e52d-6553-af3a0ae20166","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Overrides/parameter.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/parameter.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Overrides/parameter.md","rawTitle":"<h1 id=\"parameter-override\">Parameter Override</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Parameter Override","uid":"Tutorial.Resolution.Override.Parameter","updated_at":"2019-04-30 12:00 AM","wordCount":33},{"url":"/tutorials/composition/overrides/property/","path":"tutorials/composition/overrides/property/index.html","source_path":"tutorials/Composition/Overrides/property.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/overrides/property/","conceptual":"\n<p>PropertyOverride enables you to override the value for a specified property. Only the property value is overridden, not the properties selected. Its behavior is the same as ParameterOverride. The use of the OnType method enables you to specify a type to constrain the override to.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/property.md","depot_name":".","document_id":"9bee940d-3cf7-23a1-fc98-ed62d6797ee2","document_version_independent_id":"a616e5e2-d7c1-7f70-d255-96f921f486df","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Overrides/property.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Overrides/property.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Overrides/property.md","rawTitle":"<h1 id=\"property-override\">Property Override</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Property Override","uid":"Tutorial.Resolution.Override.Property","updated_at":"2019-04-30 12:00 AM","wordCount":45},{"url":"/tutorials/composition/resolution/resolution/","path":"tutorials/composition/resolution/resolution/index.html","source_path":"tutorials/Composition/Resolution/resolution.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/resolution/resolution/","conceptual":"\n<p>There are types you can create immediately from the container and there are types that require registration. Generally any primitive type would require registration and all classes are available immediately.</p>\n<p>You can use the Unity container to generate instances of any object that has a public constructor (in other words, objects that you can create using the new operator). When you call the Resolve method and specify the type that is not registered, the container simply generates and returns an instance of that type. However, the only time that this is realistically practical is when the object you are generating does not have ambiguities Unity could not resolve or contains dependency attributes that the container will use to inject dependent objects into the requested object.</p>\n<p>The Unity container identifies type registrations and type mappings in the container using a type and, optionally, a name. The type is an interface or a class (usually an interface or base class) that the desired concrete object type implements or inherits. This identifies the mapping so that the container can retrieve the correct object type in response to a call to the <code>Resolve</code> method. Where there is more than one mapping for the same type, the optional name differentiates these mappings and allows code to specify which of the mappings for that type to use.</p>\n<p>The provision of both generic and non-generic overloads of many of the Unity container methods ensures that Unity can be used in languages that do not support generics. You can use either approach (the generic or the non-generic overloads) in your code and mix them as required.</p>\n<p>The following topics describe how you can resolve objects using the Resolve or BuildUp methods:</p>\n<ul>\n<li><a href=\"../type/\" data-linktype=\"relative-path\">Resolving an Object by Type</a></li>\n<li><a href=\"../../collections/\" data-linktype=\"relative-path\">Resolving collections of Objects of a Particular Type</a></li>\n<li><a href=\"../../generics/generics/\" data-linktype=\"relative-path\">Resolving Generic Types</a></li>\n<li><a href=\"../../generics/deferred/\" data-linktype=\"relative-path\">Deferring the Resolution of Objects</a></li>\n<li><a href=\"../../overrides/override/\" data-linktype=\"relative-path\">Overrides</a></li>\n</ul>\n<p>For more information about how you can configure Unity with type registrations and mappings, see Registration.</p>\n<p>For more information about how you can perform dependency injection on existing object instances, see Using BuildUp to Wire Up Objects Not Created by the Container.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Resolution/resolution.md","depot_name":".","document_id":"1dde0392-5274-483b-f246-6a10afef0c27","document_version_independent_id":"09d0cec4-ec13-4b5a-a4d6-a94c867fe156","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Resolution/resolution.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Resolution/resolution.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Resolution/resolution.md","rawTitle":"<h1 id=\"resolving-objects\">Resolving Objects</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Object Resolution","uid":"Tutorial.Resolution","updated_at":"2019-04-30 12:00 AM","wordCount":347},{"url":"/tutorials/composition/resolution/type/","path":"tutorials/composition/resolution/type/index.html","source_path":"tutorials/Composition/Resolution/type.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/resolution/type/","conceptual":"\n<p>Unity provides a method named <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_Resolve_System_Type_System_String_Unity_Resolution_ResolverOverride___\" data-linktype=\"external\">Resolve</a> that you can use to resolve an object by type, and optionally by providing a registration name. Registrations that do not specify a name are referred to as default registrations. This topic describes how to use the <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_Resolve_System_Type_System_String_Unity_Resolution_ResolverOverride___\" data-linktype=\"external\">Resolve</a> method to resolve types and mappings registered as default registrations.</p>\n<h2 id=\"the-resolve-method-overloads-for-default-registrations\">The Resolve Method Overloads for Default Registrations</h2>\n<p>The following table describes the overloads of the Resolve method that return instances of objects based on the default registrations and mappings with the container. The API for the Unity container contains both generic and non-generic overloads of this method so that you can use it with languages that do not support the generics syntax.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Resolve&lt;T&gt;()</code></td>\n<td>Returns an instance of the type registered with the default name as the type T.</td>\n</tr>\n<tr>\n<td><code>Resolve(Type t)</code></td>\n<td>Returns an instance of the default type registered with the container as the type t.</td>\n</tr>\n<tr>\n<td><code>Resolve&lt;T&gt;(string name)</code></td>\n<td>Returns an instance of the type registered with the container as the type T and with the specified name. Names are case sensitive.</td>\n</tr>\n<tr>\n<td><code>Resolve(Type t, string name)</code></td>\n<td>Returns an instance of the type registered with the container as the type t and with the specified name. Names are case sensitive.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"using-the-resolve-method-with-default-registrations\">Using the Resolve Method with Default Registrations</h2>\n<p>The following examples show how you can use the Resolve method to create or obtain a reference to an object defined in the container configuration. Typically you will register a type mapping between an interface and a concrete type that implements it, or between a base class and a concrete type that inherits it. The examples use the run-time methods of the container to register the types it will resolve.</p>\n<h3 id=\"resolving-types-registered-as-interfaces\">Resolving Types Registered as Interfaces</h3>\n<p>The following code registers a mapping for an interface named IService and specifies that the container should return an instance of the CustomerService class (which implements the IService interface). In this case, the type IService identifies the registration type. Code that requests an instance of the type IService receives an instance of the CustomerService class. The following example uses the generic overloads of the container methods.</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;IService, CustomerService&gt;();\n\nvar instance = container.Resolve&lt;IService&gt;();\n</code></pre>\n<p>Alternatively, you can use the non-generic overloads of the methods. The following code achieves the same result.</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;IService, CustomerService&gt;();\n\nvar instance = (IService)container.Resolve(typeof(IMyService));\n</code></pre>\n<h3 id=\"resolving-types-registered-as-base-classes\">Resolving Types Registered as Base Classes</h3>\n<p>When you need to register a mapping for a base class or other object type (instead of an interface), you use the overloads of the RegisterType and Resolve methods that accept object type names. The following examples show the use of the overloads of the RegisterType and Resolve methods that accept object type names as the registration identifier.</p>\n<p>The following code registers a mapping for an object named MyBaseService and specifies that the container should return an instance of the CustomerService class (which inherits from the MyBaseService class). In this case, the type MyBaseService identifies the registration. Code that requests an instance of the type MyBaseService receives an instance of the CustomerService class.</p>\n<pre><code class=\"lang-cs\">IUnityContainer myContainer = new UnityContainer();\nmyContainer.RegisterType&lt;MyBaseService, CustomerService&gt;();\n\nMyBaseService myServiceInstance = myContainer.Resolve&lt;MyBaseService&gt;();\n</code></pre>\n<p>Alternatively, you can use the non-generic overloads of the methods. The following code achieves the same result.</p>\n<pre><code class=\"lang-cs\">IUnityContainer myContainer = new UnityContainer();\nmyContainer.RegisterType(typeof(MyBaseService), typeof(CustomerService));\n\nMyBaseService myServiceInstance = (MyBaseService)myContainer.Resolve(typeof(MyBaseService));\n</code></pre>\n<h2 id=\"using-the-resolve-method-with-named-registrations\">Using the Resolve Method with Named Registrations</h2>\n<p>If you need to create multiple registrations for the same type, you can specify a name to differentiate each registration. Then, to retrieve an object of the appropriate type, you specify the name and the registered type. Following examples demonstrate the technique:</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;IService, CustomerService&gt;();\ncontainer.RegisterType&lt;IService, CompanyService&gt;(&quot;name&quot;);\ncontainer.RegisterType&lt;IService, ExternalService&gt;(&quot;other name&quot;);\n\nvar instance = container.Resolve&lt;IService&gt;(&quot;name&quot;);\n</code></pre>\n<p>Alternatively, you can use the non-generic overloads of the methods. The following code achieves the same result.</p>\n<pre><code class=\"lang-cs\">IUnityContainer container = new UnityContainer();\ncontainer.RegisterType&lt;IService, EmailService&gt;();\ncontainer.RegisterType&lt;IService, LDAPService&gt;(&quot;name&quot;);\ncontainer.RegisterType&lt;IService, CustomerService&gt;(&quot;other name&quot;);\n\nvar instance = (IService)container.Resolve(typeof(IMyService), &quot;other name&quot;);\n</code></pre>\n<h3 id=\"note\">Note</h3>\n<p>If the target class or object specifies any dependencies of its own, using constructor, property, or method call injection attributes, the instance returned will have these dependent objects injected automatically.</p>\n<p>By default, the RegisterType method registers a type with a transient lifetime, which means that the container will not hold onto a reference to the objects it creates when you call the Resolve method. Each time you call one of these methods, the container generates a new instance of the specified or mapped type. However, you can use lifetime managers to control the creation, lifetime, and disposal of objects if required.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Resolution/type.md","depot_name":".","document_id":"828ddeb7-d1d0-42ca-3b7b-92e045095af2","document_version_independent_id":"00b7411d-8720-a67b-d3ce-17be06f6dca6","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Resolution/type.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Resolution/type.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Resolution/type.md","rawTitle":"<h1 id=\"resolving-an-object-by-type\">Resolving an Object by Type</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Resolution By Type","uid":"Tutorial.Resolution.Type","updated_at":"2019-04-30 12:00 AM","wordCount":750},{"url":"/tutorials/composition/selection/constructor/","path":"tutorials/composition/selection/constructor/index.html","source_path":"tutorials/Composition/Selection/constructor.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/selection/constructor/","conceptual":"\n<p>Proper selection of the constructor used for type instantiation is one of the most important aspects of the container operation. When creating an object, the container uses one of the following algorithms to select a constructor it will be using to initialize the object:</p>\n<ul>\n<li><p><a href=\"../../../registration/type/constructor/constructor/\" data-linktype=\"relative-path\">Constructor Injection using explicit registration</a>. With this technique, you register the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and apply an <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor</a> that specifies the dependencies to the registration. For more information see <a href=\"../../../registration/type/constructor/constructor/\" data-linktype=\"relative-path\">Constructor Injection</a></p>\n</li>\n<li><p><a href=\"../../../annotation/constructor/\" data-linktype=\"relative-path\">Constructor Annotation</a>. With this technique, you apply attribute to a class constructor that is used for injection. For more information see <a href=\"../../../annotation/constructor/\" data-linktype=\"relative-path\">Annotating Type for Constructor Injection</a></p>\n</li>\n<li><p><strong>Automatic Constructor Selection</strong>. This technique is used by the Unity container to select a constructor and to satisfy any constructor dependencies defined in parameters of the constructor if no <a href=\"../../../annotation/annotation/\" data-linktype=\"relative-path\">Annotation</a> or <a href=\"../../../registration/registration/\" data-linktype=\"relative-path\">Registration</a> exists.</p>\n</li>\n</ul>\n<h2 id=\"automatic-constructor-selection\">Automatic Constructor Selection</h2>\n<p>Automatic constructor selection is performed if no other information is available on how to create a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>. Unity uses dynamic, real time algorithm to discover and select a constructor.</p>\n<p>The Unity container will try to execute the most complex constructor it can provide with appropriate dependencies. In other words, if the container can resolve and/or inject all parameters of the constructor, it will be selected.</p>\n<h3 id=\"creating-build-pipeline\">Creating Build Pipeline</h3>\n<p>Selection process takes place during the first resolution of a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> contract. Unity container employs lazy resolution strategy. It will defer pipeline creation until the contract (<a href=\"../../../registration/metadata/\" data-linktype=\"relative-path\">RegistrationType and Name</a>) is requested.</p>\n<p>The lazy approach allows registrations to proceed at random order and do not require dependencies to be registered before dependents. As long as all of these are available at the time of resolution Unity does not care in what order they were registered.</p>\n<h3 id=\"constructor-selection-steps\">Constructor Selection Steps</h3>\n<p>One of the first steps, when creating a pipeline, is a constructor selection. Constructors are selected in the following order:</p>\n<ul>\n<li>If present, use registered <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor</a></li>\n<li>If present, annotated with an attribute</li>\n<li>Automatically select constructor\n<ul>\n<li>Get all accessible constructors</li>\n<li>Process constructors in ascending order from most complex to the default\n<ul>\n<li>Filter out <a href=\"../../../registration/type/constructor/constructor/#restrictions\" data-linktype=\"relative-path\">restricted</a> constructors</li>\n<li>Loop through parameters and check if\n<ul>\n<li>Is primitive\n<ul>\n<li>Is registered with the container</li>\n<li>Has <em>default</em> value</li>\n</ul>\n</li>\n<li>Is resolvable type</li>\n<li>Is registered with container</li>\n</ul>\n</li>\n<li>Select the first constructor the container can create</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The Unity container will select the first successful match and use it as a selection.</p>\n<div class=\"WARNING\">\n<h5>WARNING</h5>\n<p>When more than one constructor could be matched at the same time, the order and constructor selection can not be guaranteed.</p>\n</div>\n<p>During normal operation the container does not perform validation.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will perform a selection validation and will throw an exception, reporting ambiguous constructors, if more than one constructor can be successfully selected with current configuration.</p>\n</div>\n<p>If no constructor could be selected, the container will throw an exception.</p>\n<h3 id=\"pipeline-retention\">Pipeline retention</h3>\n<p>Once the pipeline is created, it will be used to satisfy all subsequent requests for that contract. If you need to update or rebuild the pipeline, the contract has to be re-registered.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Selection/constructor.md","depot_name":".","document_id":"aea11f2a-6c27-f320-3e46-c7b606c05557","document_version_independent_id":"cd59209a-97e5-ae23-fabe-a9a5b024c9a4","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Selection/constructor.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Selection/constructor.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Selection/constructor.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Automatic Constructor Selection","uid":"Tutorial.Selection.Constructor","updated_at":"2019-04-30 12:00 AM","wordCount":490},{"url":"/tutorials/composition/selection/selection/","path":"tutorials/composition/selection/selection/index.html","source_path":"tutorials/Composition/Selection/selection.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/composition/selection/selection/","conceptual":"","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Selection/selection.md","depot_name":".","document_id":"773829b3-06bb-7923-fe4b-0867d098e405","document_version_independent_id":"ad545286-383e-94cb-a269-1c679ef100bf","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/Composition/Selection/selection.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Composition/Selection/selection.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Composition/Selection/selection.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Selection","uid":"Tutorial.Resolution.Selection","updated_at":"2019-04-30 12:00 AM","wordCount":0},{"url":"/tutorials/definitions/","path":"tutorials/definitions/index.html","source_path":"tutorials/definitions.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/definitions/","conceptual":"\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/generics/#generics_terminology\" data-linktype=\"external\">Generics terminology</a></p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/definitions.md","depot_name":".","document_id":"04c5b240-961a-772a-7817-54e0bccae982","document_version_independent_id":"fa33c497-8117-ccce-36b1-aa3aa1d9adca","gitcommit":"https://github.com/unitycontainer/documentation/blob/a13df4070c33d6413bfa4faeecf4416ffd5f4330/tutorials/definitions.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/definitions.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/definitions.md","rawTitle":"<h1 id=\"terms-and-definitions\">Terms and Definitions</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Terms and Definitions","uid":"Tutorial.Terms","updated_at":"2019-03-14 02:57 AM","wordCount":2},{"url":"/tutorials/extensions/activation/","path":"tutorials/extensions/activation/index.html","source_path":"tutorials/Extensions/activation.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/extensions/activation/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/activation.md","depot_name":".","document_id":"e2640f64-1956-be9e-d1a7-e34a5362fb8a","document_version_independent_id":"afd125e2-8bf4-f155-47be-a8e5a74167ea","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Extensions/activation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/activation.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Extensions/activation.md","rawTitle":"<h1 id=\"force-activation-extension\">Force Activation Extension</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Force Activation Extension","uid":"Tutorial.Extension.Activation","updated_at":"2019-04-05 01:56 AM","wordCount":0},{"url":"/tutorials/extensions/compilation/","path":"tutorials/extensions/compilation/index.html","source_path":"tutorials/Extensions/compilation.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/extensions/compilation/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/compilation.md","depot_name":".","document_id":"48ad6cfd-57bb-860b-c35c-bcb80309ad1f","document_version_independent_id":"b9e3cc08-5d2e-b6ff-1c10-1d5b98a5cb54","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Extensions/compilation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/compilation.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Extensions/compilation.md","rawTitle":"<h1 id=\"force-compilation-extension\">Force Compilation Extension</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Force Compilation Extension","uid":"Tutorial.Extension.Compilation","updated_at":"2019-04-05 01:56 AM","wordCount":0},{"url":"/tutorials/extensions/diagnostic/","path":"tutorials/extensions/diagnostic/index.html","source_path":"tutorials/Extensions/diagnostic.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/extensions/diagnostic/","conceptual":"\n<p>Creating and configuring Unity container is a complicated process. A lot of things could go wrong and finding where it was misconfigured could be rather involved. To simplify debugging and to help fix issues Unity offers <strong>Diagnostic</strong> extension.</p>\n<h2 id=\"performance-considerations\">Performance considerations</h2>\n<p>The Unity container uses reflection for most of its operations. It gathers information about types, creates pipelines to create these types, and verifies everything all based on reflected data. Because of that it is rather resource extensive and relatively slow.</p>\n<p>To optimize performance, Unity engine does not do any runtime validation and only performs absolute minimum checks, just enough to be able to run. As result a lot of irregular conditions might go unnoticed. To remedy this, the container exposes <strong>Diagnostic</strong> extension which does thorough examination of all registration data and throws exceptions on any irregularities.</p>\n<h2 id=\"unity-diagnostic-extension\">Unity Diagnostic Extension</h2>\n<p><strong>Diagnostic</strong> extension, among other things, verifies the following conditions:</p>\n<ul>\n<li>Cyclical references (The famous Stack Overflow Exception)</li>\n<li>Validity of provided Injection Members</li>\n<li>Improper referencing to itself</li>\n<li>Invalid parameters in constructors and invoked methods</li>\n</ul>\n<h2 id=\"enabling-diagnostics\">Enabling Diagnostics</h2>\n<p>The extension could be enabled in few different ways:</p>\n<h3 id=\"add-extension\">Add Extension</h3>\n<p>The most basic case is when extension is added via <code>AddExtension(...)</code> call. It works with either regular or generic methods.</p>\n<pre><code class=\"lang-cs\">var container = new UnityContainer()\n                .AddExtension(new Diagnostic());\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-cs\">var container = new UnityContainer()\n                .AddExtension&lt;Diagnostic&gt;();\n</code></pre>\n<p>The first method, one with <code>AddExtension(new Diagnostic())</code> is a bit faster.</p>\n<h3 id=\"using-extension-method\">Using extension method</h3>\n<p>For convenience, Unity container exposes <a href=\"https://github.com/unitycontainer/container/blob/master/src/Extensions/DiagnosticExtensions.cs\" data-linktype=\"external\">EnableDiagnostic()</a> extension method. This method is equal to adding extension to the container.</p>\n<pre><code class=\"lang-cs\">var container = new UnityContainer()\n                    .EnableDiagnostic();\n</code></pre>\n<h3 id=\"enabling-extension-only-in-debug\">Enabling extension only in Debug</h3>\n<p>The container provides conditional extension <a href=\"https://github.com/unitycontainer/container/blob/master/src/Extensions/DiagnosticExtensions.cs\" data-linktype=\"external\">EnableDebugDiagnostic()</a>. This method will only enable diagnostics in <code>DEBUG</code> mode. In this example</p>\n<pre><code class=\"lang-cs\">var container = new UnityContainer();\ncontainer.EnableDebugDiagnostic();\n</code></pre>\n<p>the extension is enabled only if calling method is compiled in Debug configuration.</p>\n<div class=\"IMPORTANT\">\n<h5>IMPORTANT</h5>\n<p>Extension methods will not work on <a href=\"xref:Unity.IUnityContainer\" data-linktype=\"external\">IUnityContainer</a> interface. It is only available on the UnityContainer itself.</p>\n</div>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/diagnostic.md","depot_name":".","document_id":"b64b01be-61e5-4cb2-e0ba-303da7dd561a","document_version_independent_id":"866e42fd-367d-52c3-d247-d1cd88951345","gitcommit":"https://github.com/unitycontainer/documentation/blob/8308246108d439f29e11e853c6daa702c58ba726/tutorials/Extensions/diagnostic.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/diagnostic.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Extensions/diagnostic.md","rawTitle":"<h1 id=\"diagnostic\">Diagnostic</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Diagnostic Extension","uid":"Tutorial.Extension.Diagnostic","updated_at":"2019-04-05 01:59 AM","wordCount":315},{"url":"/tutorials/extensions/extensions/","path":"tutorials/extensions/extensions/index.html","source_path":"tutorials/Extensions/extensions.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/extensions/extensions/","conceptual":"\n<p>Unity container comes prepackaged with several extensions:</p>\n<ul>\n<li>Diagnostic Extension</li>\n<li>Legacy Constructor Selector Extension</li>\n<li>Force Compilation Extension</li>\n<li>Force Activation Extension</li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/extensions.md","depot_name":".","document_id":"175515ab-3a5e-0514-8749-ed0171ff6bd0","document_version_independent_id":"af9fca54-a600-b1ab-4b7a-4cdde5a31dae","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Extensions/extensions.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/extensions.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Extensions/extensions.md","rawTitle":"<h1 id=\"unity-extensions\">Unity Extensions</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Unity Extensions","uid":"Tutorial.Extensions","updated_at":"2019-04-05 01:56 AM","wordCount":19},{"url":"/tutorials/extensions/legacy/","path":"tutorials/extensions/legacy/index.html","source_path":"tutorials/Extensions/legacy.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/extensions/legacy/","conceptual":"","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/legacy.md","depot_name":".","document_id":"562b10a8-2c05-2a01-04d6-0be4b44f6361","document_version_independent_id":"67ecddf7-6f6f-c595-4348-6f44de20a0a3","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/Extensions/legacy.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/Extensions/legacy.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/Extensions/legacy.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Legacy Extension","uid":"Tutorial.Extension.Legacy","updated_at":"2019-04-05 01:56 AM","wordCount":0},{"url":"/tutorials/hierarchies/","path":"tutorials/hierarchies/index.html","source_path":"tutorials/hierarchies.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/hierarchies/","conceptual":"\n<p>Unity container provides a way to create child containers (other systems refer to it as resolution scopes) and allows building sophisticated scope trees of registrations. There are just a few simple rules to follow when dealing with container hierarchies:</p>\n<ul>\n<li><p>Types registered in predecessor containers always available in descendant containers. This is a very simple concept, each registration is like a public virtual declaration in cs types. Every descendant inherits it and can use at will.</p>\n</li>\n<li><p>Types registered in descendant containers override the same registration of predecessors. Following the same analogy with public virtual declarations, each override registration installs its own declaration and hides the one in predecessor containers.</p>\n</li>\n</ul>\n<h2 id=\"using-container-hierarchies\">Using Container Hierarchies</h2>\n<p>Unity supports nested containers, allowing you to build container hierarchies. Nesting containers enables you to control the scope and lifetime of singleton objects, and register different mappings for specific types. This topic contains the following sections that describe how you can create container hierarchies and use them in your applications:</p>\n<ul>\n<li>Constructing and Disposing Unity Containers</li>\n<li>Controlling Object Scope and Lifetime</li>\n<li>Overriding registrations</li>\n</ul>\n<h3 id=\"constructing-and-disposing-unity-containers\">Constructing and Disposing Unity Containers</h3>\n<p>The following methods enable you to create a new default UnityContainer, create a child container that has a specified UnityContainer as its parent, and dispose an existing container.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\"><code>new UnityContainer()</code></td>\n<td>Creates a root UnityContainer. Returns a reference to the new container.</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><code>CreateChildContainer()</code></td>\n<td>Creates a new nested UnityContainer as a child of the current container. The current container first applies its own settings, and then it checks the parent for additional settings. Returns a reference to the new container.</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><code>Dispose()</code></td>\n<td>Disposes this container instance and any child containers. Also disposes any registered object instances whose lifetimes are managed by the container.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"controlling-object-scope-and-lifetime\">Controlling Object Scope and Lifetime</h3>\n<p>When the container creates singleton objects, it manages the lifetime of these singletons. They remain in scope until you (or the garbage collector) dispose the container. At this point, it disposes the registered singleton instances it contains. In addition, if you dispose the parent container in a nested container hierarchy, it automatically disposes all child containers and the registered singletons they contain.</p>\n<p>Therefore, if you require two separate sets of such objects that must have different lifetimes, you can use hierarchical containers to store and manage each set. Register instances that you want to be able to dispose separately in one or more child containers that you can dispose without disposing the parent container.</p>\n<p>The following code demonstrates the use of a child container to manage the lifetime of specific singleton instances while maintaining the singleton instances in the parent container.</p>\n<pre><code class=\"lang-cs\">\n// Create parent container\nIUnityContainer parentCtr = new UnityContainer();\n\n// Register type in parent container\nparentCtr.RegisterType&lt;MyParentObject&gt;(TypeLifetime.PerContainer);\n\n// Create nested child container in parent container\nIUnityContainer childCtr = parentCtr.CreateChildContainer();\n\n// Register type in child container\nchildCtr.RegisterType&lt;MyChildObject&gt;(TypeLifetime.PerContainer);\n\n// Create instance of type stored in parent container\nMyParentObject parentObj = parentCtr.Resolve&lt;MyParentObject&gt;();\n\n// Create instance of type stored in child container\nMyChildObject childObj = childCtr.Resolve&lt;MyChildObject&gt;();\n\n// ... can use both generated objects here ...\n\n// Dispose child container\nchildCtr.Dispose();\n\n// ... can use only object in parent container here ...\n\n// Dispose parent container\nparentCtr.Dispose();\n</code></pre>\n<h3 id=\"overriding-registrations\">Overriding registrations</h3>\n<p>You can use nested containers when you have slightly different dependency injection requirements for specific objects but want to provide a fallback facility for objects that implement a specific interface or are of a specific type. For example, you may have a general requirement for objects that implement the IMyObject interface to map to the type MyStandardObject. However, in specific parts of the application code, you may want the IMyObject interface to map to the type MySpecialObject.</p>\n<p>In this case, you can register the general mapping in the parent container and register the specific case in a child container. Then, when you want to obtain an instance of the object, you call the Resolve method on the appropriate container. If you call the method on the child container, it returns an object of type MySpecialObject. If you call the method on the parent container, it returns an object of type MyStandardObject.</p>\n<p>However, the advantage with nested containers is that, if the child container cannot locate a mapping for the requested interface or type, it passes the request to its parent container and onward through the hierarchy until it reaches the root or base container. Therefore, for objects not mapped in the child container, the mapping in the parent container (or in an ancestor container where there are more than two levels in the hierarchy) defines the object type returned.</p>\n<p>The following code shows how you can implement the preceding scenario.</p>\n<pre><code class=\"lang-cs\">// Create parent container\nIUnityContainer parentCtr = new UnityContainer();\n\n// Register two mappings for types in parent container\nparentCtr.RegisterType&lt;IMyObject, MyStandardObject&gt;();\nparentCtr.RegisterType&lt;IMyOtherObject, MyOtherObject&gt;();\n\n// Create nested child container in parent container\nIUnityContainer childCtr = parentCtr.CreateChildContainer();\n\n// Register mapping for specific type in child container\nchildCtr.RegisterType&lt;IMyObject, MySpecialObject&gt;();\n\n// Now retrieve instances of the mapped objects using the child container.\n// Using the interface as the type for the returned objects means that it\n// does not matter which container returns the actual object.\n\n// This code returns an object of type MySpecialObject using the mapping\n// registered in the child container:\nIMyObject specialObject = childCtr.Resolve&lt;IMyObject&gt;();\n\n// This code returns an object of type MyOtherObject using the mapping\n// registered in the parent container because there is no mapping in \n// the child container for this type:\nIMyOtherObject otherObject = childCtr.Resolve&lt;IMyOtherObject&gt;();\n\n// Now retrieve instance of the standard object using the parent container.\n// This code returns an object of type MyStandardObject using the mapping\n// registered in the parent container:\nIMyObject standardObject = parentCtr.Resolve&lt;IMyObject&gt;();\n\n// Dispose parent container and child container\nparentCtr.Dispose();\n</code></pre>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/hierarchies.md","depot_name":".","document_id":"f2ce8356-f147-18ea-608e-d435aba30a24","document_version_independent_id":"3059ba46-3fde-dc5c-c040-4e7e672e2330","gitcommit":"https://github.com/unitycontainer/documentation/blob/8a5e5548aca3d3a178c32f6a6b4cc98de7f982a0/tutorials/hierarchies.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/hierarchies.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/hierarchies.md","rawTitle":"<h1 id=\"container-hierarchies\">Container Hierarchies</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Container Hierarchy","uid":"Tutorial.Container.Hierarchy","updated_at":"2019-03-16 08:42 PM","wordCount":935},{"url":"/tutorials/lifetime/container/","path":"tutorials/lifetime/container/index.html","source_path":"tutorials/lifetime/container.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/container/","conceptual":"\n<p>Per Container lifetime allows a registration of an existing or resolved object as a scoped singleton in the container it was created or registered. In other words this instance is unique within the container it war registered with. Child or parent containers could have their own instances registered for the same contract.</p>\n<p>Unity returns the same instance each time the <code>Resolve</code> method is called or when the dependency mechanism injects the instance into other classes.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>Per container lifetime is controlled by <a href=\"xref:Unity.Lifetime.ContainerControlledLifetimeManager\" data-linktype=\"external\">ContainerControlledLifetimeManager</a> type. This lifetime manager effectively implements a singleton behavior for objects registered with a particular container.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Per container lifetime is supported by all registration types</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with per container lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.PerContainer);\n</code></pre>\n<p>to register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.PerContainer);\n</code></pre>\n<p>or to register an instance:</p>\n<pre><code class=\"lang-C#\">var instance = new Service();\n\ncontainer.RegisterInstance&lt;IService&gt;(instance, InstanceLifetime.PerContainer);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_PerContainer\" data-linktype=\"external\">TypeLifetime</a>, <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_PerContainer\" data-linktype=\"external\">FactoryLifetime</a>, and <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_PerContainer\" data-linktype=\"external\">InstanceLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/container.md","depot_name":".","document_id":"f944002f-f282-161d-59c3-dc0158b81c38","document_version_independent_id":"50f57fc6-d6aa-c252-3fee-3489768c2729","gitcommit":"https://github.com/unitycontainer/documentation/blob/5697ec296ac4a4851377c765ddf766e982c4d649/tutorials/lifetime/container.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/container.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/container.md","rawTitle":"<h1 id=\"per-container-lifetime\">Per Container Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Per Container Lifetime","uid":"Tutorial.Lifetime.Container","updated_at":"2019-03-23 02:03 AM","wordCount":179},{"url":"/tutorials/lifetime/container_transient/","path":"tutorials/lifetime/container_transient/index.html","source_path":"tutorials/lifetime/container_transient.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/container_transient/","conceptual":"\n<p>This lifetime is similar to <a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a> with exception how the container holds references to created objects.</p>\n<p>On each call to the <code>Resolve&lt;T&gt;()</code> method a container will create a new objects. If the objects implements <a href=\"xref:System.IDisposable\" data-linktype=\"external\">IDisposable</a>, the container will hold a reference to the interface and will dispose the object when the container goes out of scope.</p>\n<p>This lifetime is particularly useful in session based designs with child containers associated with the session.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>Per container transient lifetime is controlled by <a href=\"xref:Unity.Lifetime.ContainerControlledTransientManager\" data-linktype=\"external\">ContainerControlledTransientManager</a> type. This lifetime manager creates transient objects and holds reference to disposable instance and disposes these when container goes out of scope.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Per container transient lifetime is only supported by <a href=\"../../registration/type/registration/\" data-linktype=\"relative-path\">Type</a> and <a href=\"../../registration/factory/\" data-linktype=\"relative-path\">Factory</a> registrations. <a href=\"../../registration/instance/\" data-linktype=\"relative-path\">Instance</a> registration does not support this lifetime.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with per container transient lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.PerContainerTransient);\n</code></pre>\n<p>or you could register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.PerContainerTransient);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_PerContainerTransient\" data-linktype=\"external\">TypeLifetime</a> and <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_PerContainerTransient\" data-linktype=\"external\">FactoryLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/container_transient.md","depot_name":".","document_id":"29a2ea99-b616-e72c-4e44-348a0626f001","document_version_independent_id":"65e82dd5-d73d-c902-ecfd-b6d9899f7e36","gitcommit":"https://github.com/unitycontainer/documentation/blob/5697ec296ac4a4851377c765ddf766e982c4d649/tutorials/lifetime/container_transient.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/container_transient.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/container_transient.md","rawTitle":"<h1 id=\"container-transient-lifetime\">Container Transient Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Container Lifetime","uid":"Tutorial.Lifetime.Container.Transient","updated_at":"2019-03-23 02:03 AM","wordCount":184},{"url":"/tutorials/lifetime/disposal/","path":"tutorials/lifetime/disposal/index.html","source_path":"tutorials/lifetime/disposal.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/disposal/","conceptual":"","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/disposal.md","depot_name":".","document_id":"2b14df58-74ce-1a15-ad4b-1a2d4d6cbeef","document_version_independent_id":"c0f3331c-2ddb-e9d7-fca1-2b6545a81a01","gitcommit":"https://github.com/unitycontainer/documentation/blob/5540f1bb5b8cc106e4f2c8566afa78046a94691a/tutorials/lifetime/disposal.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/disposal.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/disposal.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","updated_at":"2019-02-22 04:26 PM","wordCount":0},{"url":"/tutorials/lifetime/external/","path":"tutorials/lifetime/external/index.html","source_path":"tutorials/lifetime/external.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/external/","conceptual":"\n<p>This lifetime allows you to register externally created objects with the container to enable them to participate in dependency injection process. Unity maintains only a weak reference to the instances it registers.</p>\n<p>Since the container does not maintain a strong reference to the object, the garbage collector can dispose of the objects if no other code is keeping it alive.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>External lifetime is controlled by <a href=\"xref:Unity.Lifetime.ExternallyControlledLifetimeManager\" data-linktype=\"external\">ExternallyControlledLifetimeManager</a> type and provides basic support for externally managed objects.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>External lifetime is only supported by <a href=\"../../registration/instance/\" data-linktype=\"relative-path\">Instance</a> registrations.</p>\n<p>External lifetime is similar to <a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a>. It is held at the same container it is registered with and could be accessed and overridden in child container. Registrations with external lifetime override singletons with the same contract.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a registration with external lifetime:</p>\n<pre><code class=\"lang-C#\">var instance = new Service();\n...\ncontainer.RegisterInstance&lt;IService&gt;(instance, InstanceLifetime.External);\n</code></pre>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/external.md","depot_name":".","document_id":"625147b9-ab0d-c4e5-a0f3-f578ab38848b","document_version_independent_id":"46cdda77-89a2-945f-304d-ee0461f7b5a5","gitcommit":"https://github.com/unitycontainer/documentation/blob/5697ec296ac4a4851377c765ddf766e982c4d649/tutorials/lifetime/external.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/external.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/external.md","rawTitle":"<h1 id=\"external-lifetime\">External Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"External Lifetime","uid":"Tutorial.Lifetime.External","updated_at":"2019-03-23 02:03 AM","wordCount":162},{"url":"/tutorials/lifetime/hierarchical/","path":"tutorials/lifetime/hierarchical/index.html","source_path":"tutorials/lifetime/hierarchical.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/hierarchical/","conceptual":"\n<p>The Unity container allows creating hierarchies of child containers. This lifetime creates local singleton for each level of the hierarchy. So, when you resolve a type and this container does not have an instance of that type, the container will create new instance. Next time the type is resolved the same instance will be returned.</p>\n<p>If a child container is created and requested to resolve the type, the child container will create a new instance and store it for subsequent resolutions. Next time the child container requests to resolve the type, it will return the stored instance.</p>\n<p>If you have multiple children, each will resolve its own instance.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>Hierarchical lifetime is controlled by <a href=\"xref:Unity.Lifetime.HierarchicalLifetimeManager\" data-linktype=\"external\">HierarchicalLifetimeManager</a> type. It forces each child container to resolve its own instance of the object and does not share one with the parent or child containers.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Hierarchical lifetime is only supported by <a href=\"../../registration/type/registration/\" data-linktype=\"relative-path\">Type</a> and <a href=\"../../registration/factory/\" data-linktype=\"relative-path\">Factory</a> registrations. <a href=\"../../registration/instance/\" data-linktype=\"relative-path\">Instance</a> registration does not support this lifetime.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with hierarchical lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.Hierarchical);\n</code></pre>\n<p>or you could register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.Hierarchical);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_Hierarchical\" data-linktype=\"external\">TypeLifetime</a> and <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_Hierarchical\" data-linktype=\"external\">FactoryLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/hierarchical.md","depot_name":".","document_id":"ed59d502-58d2-b13f-0561-833ca822dd15","document_version_independent_id":"4a92b4ec-c719-f2a6-f0dc-cf933cc22b5d","gitcommit":"https://github.com/unitycontainer/documentation/blob/3fb58b282a3dc13782e99f27f44902dcc5ab6051/tutorials/lifetime/hierarchical.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/hierarchical.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/hierarchical.md","rawTitle":"<h1 id=\"hierarchical-lifetime\">Hierarchical Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Hierarchical Lifetime","uid":"Tutorial.Lifetime.Hierarchical","updated_at":"2019-08-27 08:54 PM","wordCount":216},{"url":"/tutorials/lifetime/lifetime/","path":"tutorials/lifetime/lifetime/index.html","source_path":"tutorials/lifetime/lifetime.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/lifetime/","conceptual":"\n<p>The Unity container manages the lifetime of objects based on a <a href=\"xref:Unity.Lifetime\" data-linktype=\"external\">Lifetime Manager</a> you specify when you register the type.</p>\n<p>The default behavior for the container, if no lifetime is registered, to use a <a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a>. It creates a new instance of the requested type each time <code>Resolve</code> method is called or when the dependency mechanism injects instances into other classes. The container does not store any references to the object.</p>\n<p>Unity uses specific types that inherit from the <code>LifetimeManager</code> base class (collectively referred to as lifetime managers) to control how it stores references to object instances and how the container disposes of these instances.</p>\n<p>When you register an existing object using the <code>RegisterInstance</code> method, the default behavior is for the container to take over management of the lifetime of the object you pass to this method using the <a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a>. This means that container maintains strong reference to the object and at the end of the container lifetime, the existing object is disposed.</p>\n<h2 id=\"how-registering-lifetime-works\">How registering lifetime works</h2>\n<p>When type is registered with a lifetime manager, the creation and life cycle of the created instances is controlled according to that lifetime.</p>\n<p>When a container is requested to produce an instance of the type, it first checks if a lifetime manager is associated with it. If not, or if it is a transient manager, the container simply creates the instance and return it to the caller.</p>\n<p>If registration contains a lifetime manager, the container tries to get the value from that manager. If the manager has nothing stored in it, the container created an instance. But before it returns the instance to the caller it adds it to the lifetime manager for later use.</p>\n<p>Next time the type is requested, the container gets the value previously stored in the manager, if available, and returns it to the caller.</p>\n<p>Each lifetime manager has its own criteria how to store and retrieve object instances. Some only store unique instances in a container, others store unique instances per thread or session. Each algorithm serves particular purpose.</p>\n<h2 id=\"built-in-lifetimes\">Built-In Lifetimes</h2>\n<p>The Unity container implements several lifetime managers that you can use directly in your code. The range covers most common use cases and scenarios. Unity includes the following lifetime implementations:</p>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/lifetime.md","depot_name":".","document_id":"5967a720-f54b-9740-a35b-9261249cd593","document_version_independent_id":"508ed49a-b285-2772-22f3-504f140d52cc","gitcommit":"https://github.com/unitycontainer/documentation/blob/c070d39a1c3e31474fffb345891d82d0095e5b2e/tutorials/lifetime/lifetime.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/lifetime.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/lifetime.md","rawTitle":"<h1 id=\"lifetime\">Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Lifetime Management","uid":"Tutorial.Lifetime","updated_at":"2019-03-23 02:38 AM","wordCount":395},{"url":"/tutorials/lifetime/managers/","path":"tutorials/lifetime/managers/index.html","source_path":"tutorials/lifetime/managers.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/managers/","conceptual":"<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/managers.md","depot_name":".","document_id":"f8559604-1b16-b232-33ff-2f49cb407425","document_version_independent_id":"bc1bd747-5468-e6d2-c466-1c22570f613b","gitcommit":"https://github.com/unitycontainer/documentation/blob/5697ec296ac4a4851377c765ddf766e982c4d649/tutorials/lifetime/managers.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/managers.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/managers.md","rawTitle":"","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Lifetime Managers","uid":"Tutorial.Lifetime.Managers","updated_at":"2019-03-23 02:03 AM","wordCount":20},{"url":"/tutorials/lifetime/resolve/","path":"tutorials/lifetime/resolve/index.html","source_path":"tutorials/lifetime/resolve.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/resolve/","conceptual":"\n<p>This lifetime keeps a reference to an instance only for the duration of one resolution call. This type of lifetime is useful when you need to pass the same instance of the dependency to a different nodes of the resolution graph. Consider this scenario:</p>\n<pre><code class=\"lang-cs\">\nclass a {}\n\nclass b\n{\n    b(a arg)\n    {...}\n}\n\nclass c\n{\n    c(a arg1, b arg2)\n    {...}\n}\n\n</code></pre>\n<p>When you resolve type <code>c</code>, it depends on type <code>b</code> and type <code>a</code>. Type <code>b</code>, in turn, also depends on type <code>a</code>, and both types, <code>c</code> and <code>b</code>, require <code>a</code> to be the same instance.</p>\n<p>If type <code>a</code> is a singleton, the logic is easy. But if you require each instance of <code>c</code> to have a unique <code>a</code>, you could use per resolve lifetime. The instance of <code>a</code> will act as a singleton only during that one resolution. Next call to resolve the dependent type will create a new object.</p>\n<p>In the case of recursion, the singleton behavior is still applies and prevents circular dependency.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>Per resolve lifetime is controlled by <a href=\"xref:Unity.Lifetime.PerResolveLifetimeManager\" data-linktype=\"external\">PerResolveLifetimeManager</a> type. This lifetime manager effectively implements a singleton behavior for objects on a per-resolve basis.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Per resolve lifetime is only supported by <a href=\"../../registration/type/registration/\" data-linktype=\"relative-path\">Type</a> and <a href=\"../../registration/factory/\" data-linktype=\"relative-path\">Factory</a> registrations. <a href=\"../../registration/instance/\" data-linktype=\"relative-path\">Instance</a> registration does not support this lifetime.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with per resolve lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.PerResolve);\n</code></pre>\n<p>or you could register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.PerResolve);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_PerResolve\" data-linktype=\"external\">TypeLifetime</a> and <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_PerResolve\" data-linktype=\"external\">FactoryLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/resolve.md","depot_name":".","document_id":"0d58f2b4-f70d-efe0-5963-be66ccaab8f2","document_version_independent_id":"a1db04ca-fb22-ecd3-2542-e1a1f9d0cc0b","gitcommit":"https://github.com/unitycontainer/documentation/blob/6a3bce3e65127863d30af8960c9eb3393e9181c1/tutorials/lifetime/resolve.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/resolve.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/resolve.md","rawTitle":"<h1 id=\"per-resolve-lifetime\">Per Resolve Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Per Resolve Lifetime","uid":"Tutorial.Lifetime.Resolve","updated_at":"2019-03-24 07:28 PM","wordCount":269},{"url":"/tutorials/lifetime/singleton/","path":"tutorials/lifetime/singleton/index.html","source_path":"tutorials/lifetime/singleton.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/singleton/","conceptual":"\n<p>Singleton lifetime creates globally unique singleton. Any Unity container tree (parent and all the children) is guaranteed to have only one global singleton for the registered type.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>The singleton lifetime is controlled by <a href=\"xref:Unity.Lifetime.SingletonLifetimeManager\" data-linktype=\"external\">SingletonLifetimeManager</a> type.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Registering a type with singleton lifetime always places the registration at the root of the container tree and makes it globally available for all the children of that container. It does not matter if registration takes places at the root of child container the destination is always the root node.</p>\n<p>Repeating the registration on any of the child nodes with singleton lifetime will always override the root registration.</p>\n<p>Singleton lifetime is supported by all registration types.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with singleton lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.Singleton);\n</code></pre>\n<p>to register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.Singleton);\n</code></pre>\n<p>or to register an instance:</p>\n<pre><code class=\"lang-C#\">var instance = new Service();\n\ncontainer.RegisterInstance&lt;IService&gt;(instance, InstanceLifetime.Singleton);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_Singleton\" data-linktype=\"external\">TypeLifetime</a>, <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_Singleton\" data-linktype=\"external\">FactoryLifetime</a>, and <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_Singleton\" data-linktype=\"external\">InstanceLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/singleton.md","depot_name":".","document_id":"a3491109-364d-05db-d4a5-f61fc2ce069e","document_version_independent_id":"39b0fe65-5ec7-100d-e2a6-897d10093ccb","gitcommit":"https://github.com/unitycontainer/documentation/blob/6a3bce3e65127863d30af8960c9eb3393e9181c1/tutorials/lifetime/singleton.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/singleton.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/singleton.md","rawTitle":"<h1 id=\"singleton-lifetime\">Singleton Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Singleton Lifetime","uid":"Tutorial.Lifetime.Singleton","updated_at":"2019-03-24 07:28 PM","wordCount":182},{"url":"/tutorials/lifetime/thread/","path":"tutorials/lifetime/thread/index.html","source_path":"tutorials/lifetime/thread.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/thread/","conceptual":"\n<p>Per thread lifetime means a new instance of the registered <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> will be created once per each thread. In other words, if a <code>Resolve&lt;T&gt;()</code> method is called on a thread the first time, it will return a new object. Each subsequent call to <code>Resolve&lt;T&gt;()</code>, or when the dependency mechanism injects instances of the type into other classes on the same thread, the container will return the same object.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>Per thread lifetime is controlled by <a href=\"xref:Unity.Lifetime.PerThreadLifetimeManager\" data-linktype=\"external\">PerThreadLifetimeManager</a> type. This lifetime manager effectively implements a singleton behavior for objects on a per-thread basis.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>Per thread lifetime is only supported by <a href=\"../../registration/type/registration/\" data-linktype=\"relative-path\">Type</a> and <a href=\"../../registration/factory/\" data-linktype=\"relative-path\">Factory</a> registrations. <a href=\"../../registration/instance/\" data-linktype=\"relative-path\">Instance</a> registration does not support this lifetime.</p>\n<h3 id=\"example\">Example</h3>\n<p>To create a Type registration with per thread lifetime:</p>\n<pre><code class=\"lang-C#\">container.RegisterType&lt;IService, Service&gt;(TypeLifetime.PerThread);\n</code></pre>\n<p>or you could register a factory:</p>\n<pre><code class=\"lang-C#\">container.RegisterFactory&lt;IService&gt;((c, t, n) =&gt; new Service(),\n                                    FactoryLifetime.PerThread);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Please note that registrations use <a href=\"xref:Unity.TypeLifetime#Unity_TypeLifetime_PerThread\" data-linktype=\"external\">TypeLifetime</a> and <a href=\"xref:Unity.FactoryLifetime#Unity_FactoryLifetime_PerThread\" data-linktype=\"external\">FactoryLifetime</a> respectively.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"../transient/\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"./\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/thread.md","depot_name":".","document_id":"ab2df0fc-9e21-ded4-29f6-963493984600","document_version_independent_id":"572b5b1f-4bc4-bd1e-0e0a-4b89f5fe2529","gitcommit":"https://github.com/unitycontainer/documentation/blob/bb6dc876c93ae8f48e84e24ed81ea6122119f554/tutorials/lifetime/thread.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/thread.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/thread.md","rawTitle":"<h1 id=\"per-thread-lifetime\">Per Thread Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Per Thread Lifetime","uid":"Tutorial.Lifetime.Thread","updated_at":"2019-03-23 12:23 AM","wordCount":169},{"url":"/tutorials/lifetime/transient/","path":"tutorials/lifetime/transient/index.html","source_path":"tutorials/lifetime/transient.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/lifetime/transient/","conceptual":"\n<p>Transient lifetime is a default lifetime of the Unity container. As the name implies it lasts very short period of time, actually, no time at all. In the Unity container terms, having transient lifetime is the same as having no lifetime manager at all.</p>\n<p>For this lifetime manager Unity creates and returns a new instance of the requested type for each call to the <strong>Resolve</strong> method.</p>\n<h2 id=\"the-lifetime-manager\">The Lifetime Manager</h2>\n<p>The transient lifetime is controlled by <a href=\"xref:Unity.Lifetime.TransientLifetimeManager\" data-linktype=\"external\">TransientLifetimeManager</a>. This lifetime manager is used by default for all types registered using the <strong>RegisterType</strong> method where no specific manager has been provided.</p>\n<h2 id=\"registration\">Registration</h2>\n<p>When registering a transient <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> it is recommended to not pass an instance of <a href=\"xref:Unity.Lifetime.TransientLifetimeManager\" data-linktype=\"external\">TransientLifetimeManager</a> to the registration, but allow Unity to create it explicitly.</p>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-C#\">RegisterType&lt;Foo&gt;();\nRegisterType&lt;IService, Service&gt;();\n</code></pre>\n<p>In this example a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> <code>Foo</code> and a mapping from <code>IService</code> to <code>Service</code> both registered with transient lifetime.  So every call to <code>Resolve&lt;Foo&gt;()</code> or <code>Resolve&lt;IService&gt;()</code> will create a new object instance.</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"./\" data-linktype=\"relative-path\">Transient Lifetime</a></li>\n<li><a href=\"../singleton/\" data-linktype=\"relative-path\">Singleton Lifetime</a></li>\n<li><a href=\"../container/\" data-linktype=\"relative-path\">Per Container Lifetime</a></li>\n<li><a href=\"../container_transient/\" data-linktype=\"relative-path\">Per Container Transient</a></li>\n<li><a href=\"../hierarchical/\" data-linktype=\"relative-path\">Hierarchical Lifetime</a></li>\n<li><a href=\"../resolve/\" data-linktype=\"relative-path\">Per Resolve Lifetime</a></li>\n<li><a href=\"../thread/\" data-linktype=\"relative-path\">Per Thread Lifetime</a></li>\n<li><a href=\"../external/\" data-linktype=\"relative-path\">External Lifetime</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/transient.md","depot_name":".","document_id":"06238d76-3b70-618a-912e-a9c1962b98ac","document_version_independent_id":"f0f53112-6e30-292d-4b71-9573e0cded31","gitcommit":"https://github.com/unitycontainer/documentation/blob/c71e919e39ea3263b8425ee4c43a30d223d6f726/tutorials/lifetime/transient.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/lifetime/transient.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/lifetime/transient.md","rawTitle":"<h1 id=\"transient-lifetime\">Transient Lifetime</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Transient Lifetime","uid":"Tutorial.Lifetime.Transient","updated_at":"2019-03-22 11:43 PM","wordCount":181},{"url":"/tutorials/registration/factory/","path":"tutorials/registration/factory/index.html","source_path":"tutorials/registration/factory.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/factory/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/factory.md","depot_name":".","document_id":"f0604d33-6d6b-f783-d6b5-11384867111b","document_version_independent_id":"2cdbbcb1-87c4-a276-7ac0-13258465cf06","gitcommit":"https://github.com/unitycontainer/documentation/blob/fcf3dc0a8e1438e5b0d980be1f7a8ea83ed2efdc/tutorials/registration/factory.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/factory.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/factory.md","rawTitle":"<h1 id=\"factory-registration\">Factory Registration</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Factory Registration","uid":"Tutorial.Registration.Factory","updated_at":"2019-03-06 11:21 PM","wordCount":0},{"url":"/tutorials/registration/instance/","path":"tutorials/registration/instance/index.html","source_path":"tutorials/registration/instance.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/instance/","conceptual":"\n<p>Registering instances is useful if you already have an instance of an object that you have previously created and want Unity to manage its lifetime, or if you want Unity to inject that object into other objects that it is resolving.</p>\n<p>From container's point of view instance registration is in every way similar to type registration, except that it does not need to create the instance on the first Resolve request. It simply gets the object from lifetime manager and returns it as requested. The LifetimeManager controls the lifetime of the object and disposes it when appropriate.</p>\n<h2 id=\"registration-of-an-existing-object-instances\">Registration of an Existing Object Instances</h2>\n<p>The <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_RegisterInstance_System_Type_System_String_System_Object_Unity_Lifetime_IInstanceLifetimeManager_\" data-linktype=\"external\">RegisterInstance</a> method registers an existing instance with the container. You specify the instance type and optional lifetime in the parameter list. The container will return the specified existing instance for the duration of the specified lifetime. Unity container offers several overloads to simplify registration syntax. The simplest instance registration does not require any additional parameters other than instance itself:</p>\n<pre><code class=\"lang-cs\">var instance = new Service();\n\ncontainer.RegisterInstance(instance);\n</code></pre>\n<p>Resolving type <strong>Service</strong> like this <code>container.Resolve&lt;Service&gt;()</code> will return an instance of the <strong>Service</strong> object we registered.</p>\n<h2 id=\"metadata\">Metadata</h2>\n<p>Instance registration, as any other registration type, supports adding a registration <a href=\"../metadata/#name\" data-linktype=\"relative-path\">Name</a>. Doing so lets you register multiple instance of the same <code>Type</code> for later retrieval as a collection. Using overload you can write it like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance(&quot;Some Name&quot;, instance);\n</code></pre>\n<h2 id=\"type-mapping\">Type mapping</h2>\n<p>Any instance can also be registered as any of the ancestral types or any of the interfaces it implements effectively creating a mapping between these types.</p>\n<pre><code class=\"lang-cs\">var instance = new Service();\n\ncontainer.RegisterInstance&lt;IService&gt;(instance);\ncontainer.RegisterInstance&lt;IService&gt;(&quot;Some Name&quot;, instance);\nor\ncontainer.RegisterInstance(typeof(IService), instance)\ncontainer.RegisterInstance(typeof(IService), &quot;xyz&quot;, instance)\n</code></pre>\n<p>In this example Unity creates two registrations of type <strong>IService</strong>. When either is resolved it returns the instance of the <strong>Service</strong> object we registered with container. For more information see <a href=\"../../composition/mapping/mapping/\" data-linktype=\"relative-path\">Type Mapping</a></p>\n<h2 id=\"lifetime\">Lifetime</h2>\n<p>Due to the fact that container does not create these instances, the instance registration only supports limited number of compatible lifetimes:</p>\n<h3 id=\"per-container\"><a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_PerContainer\" data-linktype=\"external\">Per Container</a></h3>\n<p>By default Unity uses <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_PerContainer\" data-linktype=\"external\">Per Container</a> lifetime manager when no manager specified explicitly. So all these examples above will be registered with container scope. Unity will keep these instances referenced and alive until the container is alive. Although it is not necessary to provide container controlled lifetime manager you can still write it like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance(&quot;Some Name&quot;, instance, InstanceLifetime.PerContainer);\ncontainer.RegisterInstance&lt;IService&gt;(&quot;Some Name&quot;, instance, InstanceLifetime.PerContainer);\n</code></pre>\n<h3 id=\"singleton\"><a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_Singleton\" data-linktype=\"external\">Singleton</a></h3>\n<p>Instances can be registered as global singletons by using <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_Singleton\" data-linktype=\"external\">Singleton</a> lifetime manager:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance(&quot;Some Name&quot;, instance, InstanceLifetime.Singleton);\ncontainer.RegisterInstance&lt;IService&gt;(&quot;Some Name&quot;, instance, InstanceLifetime.Singleton);\n</code></pre>\n<p>These instances will be kept alive until root container is disposed.</p>\n<h3 id=\"external\"><a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_External\" data-linktype=\"external\">External</a></h3>\n<p>If Unity is not supposed to control lifetime of the object the <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_External\" data-linktype=\"external\">External</a> lifetime manager is used:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance&lt;IService&gt;(&quot;Some Name&quot;, instance, InstanceLifetime.External);\n</code></pre>\n<p><a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_External\" data-linktype=\"external\">External</a> lifetime manager is also useful when same instance is registered via multiple interfaces. In this case only one registration should use <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_PerContainer\" data-linktype=\"external\">Per Container</a> or <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_Singleton\" data-linktype=\"external\">Singleton</a> manager and the rest should be registered with <a href=\"xref:Unity.InstanceLifetime#Unity_InstanceLifetime_External\" data-linktype=\"external\">External</a> lifetime manager. This way, when object is disposed, it is not disposed multiple times:</p>\n<pre><code class=\"lang-cs\">container.RegisterInstance(instance, InstanceLifetime.Singleton);\n\ncontainer.RegisterInstance&lt;IService&gt;(        instance, InstanceLifetime.External);\ncontainer.RegisterInstance&lt;IService&gt;(&quot;Name&quot;, instance, InstanceLifetime.External);\n</code></pre>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/instance.md","depot_name":".","document_id":"2db4d9db-4837-9463-3cc7-45a8a5227018","document_version_independent_id":"9ecb4aa2-4bbf-0201-0504-07b44db0e1ce","gitcommit":"https://github.com/unitycontainer/documentation/blob/f7cbb8984464479a73b5e679f9345c034bc91f38/tutorials/registration/instance.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/instance.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/instance.md","rawTitle":"<h1 id=\"instance-registration\">Instance Registration</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Instance Registration","uid":"Tutorial.Registration.Instance","updated_at":"2019-03-07 05:22 AM","wordCount":499},{"url":"/tutorials/registration/metadata/","path":"tutorials/registration/metadata/index.html","source_path":"tutorials/registration/metadata.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/metadata/","conceptual":"\n<p>During registration Unity relies on information you provide to properly register types, instances, and factories. This is a description of metadata you could provide to properly declare how the <code>Type</code> should be registered and  built:</p>\n<h2 id=\"registered-type\"><a href=\"xref:Unity.IContainerRegistration#Unity_IContainerRegistration_RegisteredType\" data-linktype=\"external\">Registered Type</a></h2>\n<p>A <code>Type</code> that will be requested during resolution is called <strong>Registered Type</strong>. In the example below <code>SomeType</code> would be a registered type.</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;SomeType&gt;();\n...\nvar value = container.Resolve&lt;SomeType&gt;();\n</code></pre>\n<p>Different container authors call this type by different names, <a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ee650974(v%3dpandp.10)\" data-linktype=\"external\">FromType</a>, <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicedescriptor.servicetype\" data-linktype=\"external\">ServiceType</a>, etc. The key point to remember is that this is the <code>Type</code> container will be referencing in the internal registry and will be looking for when executing the resolve.</p>\n<h2 id=\"name\"><a href=\"xref:Unity.IContainerRegistration#Unity_IContainerRegistration_Name\" data-linktype=\"external\">Name</a></h2>\n<p>Each registration must be unique within the scope on a container it is registered with. A registration is identified by two pieces of information: <strong><code>Registered Type</code></strong> and <strong><code>Name</code></strong>.\nAdding the name to registration allows multiple 'instances' of the same type to be registered with the container.</p>\n<p>For example, if you register the same service with no name multiple times, each subsequent registration will override the last because in each case you are registering the same type <code>IService</code> with the same name <code>null</code>:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, Service1&gt;();\ncontainer.RegisterType&lt;IService, Service2&gt;();\ncontainer.RegisterType&lt;IService, Service3&gt;();\n\nvar enumeration = container.Resolve&lt;IEnumerable&lt;IService&gt;&gt;();\nvar count = enumeration.Count();\n</code></pre>\n<p>The value of variable <code>count</code> will be <code>1</code>.</p>\n<p>Adding unique names to registrations makes each unique:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, Service1&gt;(&quot;1&quot;);\ncontainer.RegisterType&lt;IService, Service2&gt;(&quot;2&quot;);\ncontainer.RegisterType&lt;IService, Service3&gt;(&quot;3&quot;);\n\nvar enumeration = container.Resolve&lt;IEnumerable&lt;IService&gt;&gt;();\nvar count = enumeration.Count();\n</code></pre>\n<p>In this example the value of variable <code>count</code> will be <code>3</code>.</p>\n<h2 id=\"mapped-to-type\"><a href=\"xref:Unity.IContainerRegistration#Unity_IContainerRegistration_MappedToType\" data-linktype=\"external\">Mapped To Type</a></h2>\n<p>Sometimes it is also called <a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ee650974(v%3dpandp.10)\" data-linktype=\"external\">ToType</a>, <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicedescriptor.implementationtype\" data-linktype=\"external\">ImplementationType</a>, and etc. It describes the type Unity should use to create the instance. <code>Mapped To Type</code> must be descendant of, or it should implement the <code>Registered Type</code>. In other words, it must be assignable to a variable of <code>Registered Type</code>.</p>\n<p>This registration member creates a mapping between service and implementation types. In the following example <code>IService</code> is mapped to <code>Service</code> and when Unity container is asked to resolve <code>IService</code> it will, in turn, create an instance of type <code>Service</code> and return it as interface <code>IService</code>.</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, Service&gt;();\n\nvar result = container.Resolve&lt;IService&gt;();\n\nAssert(typeof(Service) == result.GetType())\n</code></pre>\n<p>For more information see <a href=\"../../composition/mapping/mapping/\" data-linktype=\"relative-path\">Type Mapping</a>.</p>\n<h2 id=\"lifetime-manager\"><a href=\"xref:Unity.IContainerRegistration#Unity_IContainerRegistration_LifetimeManager\" data-linktype=\"external\">Lifetime Manager</a></h2>\n<p>This member holds a reference to a lifetime manager that Unity will be using to manage instance(s) of this type. For more information see <a href=\"../../lifetime/lifetime/\" data-linktype=\"relative-path\">Lifetime Management</a>.</p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/metadata.md","depot_name":".","document_id":"fc6c3f44-66b3-f55d-334e-840d9ac78cb1","document_version_independent_id":"f13bf8e3-6b83-d673-6b1f-cc55aa6cff6a","gitcommit":"https://github.com/unitycontainer/documentation/blob/2a5f6d8a2ee72d62253de6ab40494c4d39e00011/tutorials/registration/metadata.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/metadata.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/metadata.md","rawTitle":"<h1 id=\"registration-metadata\">Registration Metadata</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Registration Metadata","uid":"Tutorial.Registration.Metadata","updated_at":"2019-05-15 06:34 PM","wordCount":380},{"url":"/tutorials/registration/registration/","path":"tutorials/registration/registration/index.html","source_path":"tutorials/registration/registration.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/registration/","conceptual":"\n<p>Unity does not require <code>Type</code> to be registered to resolve it.</p>\n<p>Any concrete, constructable <code>Type</code> could be resolved by Unity without any prior preparation. It will even create and supply parameters if required. In other words, if you can create a <code>Type</code> with <code>new</code> operator:</p>\n<pre><code class=\"lang-cs\">var value = new SomeClass(new SomeOtherClass());\n</code></pre>\n<p>you can resolve it from Unity:</p>\n<pre><code class=\"lang-cs\">var value = container.Resolve&lt;SomeClass&gt;();\n</code></pre>\n<h2 id=\"minimum-registration-requirements\">Minimum Registration Requirements</h2>\n<p>A lot of times, if type does not require any custom steps, it is faster to resolve <code>Type</code> from the container if it is not registered. You should only register a <code>Type</code> if one of the following is required:</p>\n<ul>\n<li>Lifetime policy other than transient</li>\n<li>Nondefault constructor should be selected</li>\n<li>Properties or fields not marked with appropriate attributes should be injected</li>\n<li>Method should be called during initialization on the created object</li>\n<li>Mapping between service and implementation types</li>\n</ul>\n<h2 id=\"what-is-a-registration-and-how-it-works\">What is a Registration and how it works</h2>\n<p>Registration is how you control Unity to do it 'Your' way. When you register a <code>Type</code>, you are instructing Unity to create and initialize an instance of that <code>Type</code> in a very particular way. You also instruct Unity how to deal with the crated instance during its lifetime.</p>\n<p>Once registration is complete, Unity creates a blueprint of the type factory where it stores implementation details (name, to and from types, etc.), information about what members to inject and how, and lifetime manager responsible for managing the instance.\nAt the later time, when that <code>Type</code> is requested, Unity uses this blueprint to create a pipeline (resolver delegate) to be used to create type.</p>\n<p>Each Unity container exposes a <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_Registrations\" data-linktype=\"external\">collection</a> of available registrations presented as an enumeration of <a href=\"xref:Unity.IContainerRegistration\" data-linktype=\"external\">IContainerRegistration</a> objects. This collection could be used to filter and select certain registrations as well as to <a href=\"xref:Unity.IUnityContainer#Unity_IUnityContainer_IsRegistered_System_Type_System_String_\" data-linktype=\"external\">check if the <code>Type</code> is registered</a> and how.</p>\n<h2 id=\"different-types-of-registrations\">Different types of registrations</h2>\n<p>Unity recognizes three different scenarios of how instances and types are created and based on these allows three different types of registrations:</p>\n<h3 id=\"instances-created-outside-of-unity\">Instances created outside of Unity</h3>\n<p>A lot of times parts of system's infrastructure require to be available to clients and services of the application. These entities are created and managed outside of the Unity but should be accessible by consumers of the framework during resolution. To enable access to these objects Unity provides a way to register instances. For more information see <a href=\"../instance/\" data-linktype=\"relative-path\">Instance Registration</a>.</p>\n<h3 id=\"instances-created-by-unity-using-provided-type-factory\">Instances created by Unity using provided Type Factory</h3>\n<p>Although Unity is quite capable in creating instances of types, sometimes it is more efficient or desireable to use <code>Type</code> factories. Unity provides API to register a special factory delegate. For more information see <a href=\"../factory/\" data-linktype=\"relative-path\">Factory Registration</a></p>\n<h3 id=\"instances-created-by-unity\">Instances created by Unity</h3>\n<p>This is the most common scenario where objects are created by the container itself. Creation process is controlled by either <code>Type</code> registrations associated with the container or implicit Unity defaults if none registered. For more information how <code>Type</code> can be registered see<a href=\"../type/registration/\" data-linktype=\"relative-path\">Type Registration</a></p>\n<h2 id=\"container-hierarchies\">Container Hierarchies</h2>\n<p>Unity container provides a way to create child containers (also referred as creating scopes) and allows building sophisticated hierarchical trees of registrations. There are just a few simple rules to follow when dealing with container hierarchies. For more information see <a href=\"../../hierarchies/\" data-linktype=\"relative-path\">Container Hierarchy</a></p>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/registration.md","depot_name":".","document_id":"155f0237-7c9a-c764-d36c-ce050328f35d","document_version_independent_id":"9690b687-88ba-a4a2-ef60-1c2cf2353e9f","gitcommit":"https://github.com/unitycontainer/documentation/blob/a17b17619ae5cf4fc682ced9bb9eddc392311e26/tutorials/registration/registration.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/registration.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/registration.md","rawTitle":"<h1 id=\"registration\">Registration</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Registration","uid":"Tutorial.Registration","updated_at":"2019-03-11 12:32 AM","wordCount":525},{"url":"/tutorials/registration/type/constructor/annotation/","path":"tutorials/registration/type/constructor/annotation/index.html","source_path":"tutorials/registration/Type/Constructor/annotation.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/annotation/","conceptual":"\n<p>To select constructors you create through the Unity container, you can use the following three techniques:</p>\n<ul>\n<li><p><a href=\"../../../../composition/selection/constructor/\" data-linktype=\"relative-path\">Automatic Constructor Injection</a>. With this technique, you allow the Unity container to select a constructor and to satisfy any constructor dependencies defined in parameters of the constructor automatically. For more information see <a href=\"../../../../composition/selection/constructor/\" data-linktype=\"relative-path\">Automatic Constructor Selection</a>.</p>\n</li>\n<li><p><a href=\"../constructor/\" data-linktype=\"relative-path\">Constructor Injection using explicit registration</a>. With this technique, you register the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and apply an <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor Member</a> that specifies the dependencies to the registration. For more information see <a href=\"../constructor/\" data-linktype=\"relative-path\">Constructor Injection</a></p>\n</li>\n<li><p><strong>Annotated Constructor Injection</strong>. With this technique, you apply <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute to one of the class constructors to designate it to be used to instantiate an instance.</p>\n</li>\n</ul>\n<h2 id=\"annotated-constructor-injection\">Annotated Constructor Injection</h2>\n<p>Constructor Injection with Attribute Annotation allows you to apply attributes to the class' constructor designating it for dependency injection. When creating the class, Unity will always (unless explicitly overwritten in Registration) use that constructor. You only need to use this technique when there is more than one constructor in the target type.</p>\n<h3 id=\"annotating-a-constructor\">Annotating a Constructor</h3>\n<p>When a target class contains more than one constructor and the automatic algorithm does not provide desired selection, you may use the <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute to specify the constructor you wish to use for injection.</p>\n<p>Consider the following <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>In this example type <code>Service</code> contains four public constructors. Three of these constructors have one parameter each. A <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> like this creates an ambiguity that Unity could not resolve by itself.</p>\n<div class=\"WARNING\">\n<h5>WARNING</h5>\n<p>During resolution, the container will pick the first constructor it could satisfy with dependencies and will use it. In the example above, it could be any of the three constructors with one parameter.</p>\n</div>\n<p>The container is not trying to validate all available contractors during normal execution.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will throw an exception reporting ambiguous constructors.</p>\n</div>\n<p>Normally, Unity would select the third constructor with three parameters, but by annotating the second constructor with the attribute you force Unity to use it during resolution.</p>\n<h3 id=\"multiple-constructor-annotations\">Multiple Constructor Annotations</h3>\n<p>Annotating multiple constructors with injection parameters is not recommended. Unity is not guaranteed to process constructors in certain order. If multiple constructors are annotated, behavior might change from version to version.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will throw an exception reporting ambiguous constructor annotations.</p>\n</div>\n<h3 id=\"see-also\">See Also</h3>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/annotation.md","depot_name":".","document_id":"bccfb7ef-9055-d8bb-1199-c150fefc32b1","document_version_independent_id":"ab8a87e3-5b14-9e99-2f2a-60bdaac3187d","gitcommit":"https://github.com/unitycontainer/documentation/blob/def407738a9e4faa7af27aa5378faf3b04541ed7/tutorials/registration/Type/Constructor/annotation.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/annotation.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/annotation.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Select Constructor By Attribute Annotation","uid":"Tutorial.Injection.Constructor.Annotation","updated_at":"2019-03-10 08:00 PM","wordCount":409},{"url":"/tutorials/registration/type/constructor/automatic/","path":"tutorials/registration/type/constructor/automatic/index.html","source_path":"tutorials/registration/Type/Constructor/automatic.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/automatic/","conceptual":"\n<p>Proper selection of the constructor used for type instantiation is one of the most important aspects of the container operation. When creating an object, the container uses one of the following algorithms to select a constructor it will be using to initialize the object:</p>\n<ul>\n<li><p><a href=\"../constructor/\" data-linktype=\"relative-path\">Constructor Injection using explicit registration</a>. With this technique, you register the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and apply an <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor</a> that specifies the dependencies to the registration. For more information see <a href=\"../constructor/\" data-linktype=\"relative-path\">Constructor Injection</a></p>\n</li>\n<li><p><a href=\"../../../../annotation/constructor/\" data-linktype=\"relative-path\">Constructor Annotation</a>. With this technique, you apply attribute to a class constructor that is used for injection. For more information see <a href=\"../../../../annotation/constructor/\" data-linktype=\"relative-path\">Annotating Type for Constructor Injection</a></p>\n</li>\n<li><p><strong>Automatic Constructor Selection</strong>. This technique is used by the Unity container to select a constructor and to satisfy any constructor dependencies defined in parameters of the constructor if no <a href=\"../../../../annotation/annotation/\" data-linktype=\"relative-path\">Annotation</a> or <a href=\"../../../registration/\" data-linktype=\"relative-path\">Registration</a> exists.</p>\n</li>\n</ul>\n<h2 id=\"automatic-constructor-selection\">Automatic Constructor Selection</h2>\n<p>Automatic constructor selection is performed if no other information is available on how to create a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>. Unity uses dynamic, real time algorithm to discover and select a constructor.</p>\n<p>The Unity container will try to execute the most complex constructor it can provide with appropriate dependencies. In other words, if the container can resolve and/or inject all parameters of the constructor, it will be selected.</p>\n<h3 id=\"creating-build-pipeline\">Creating Build Pipeline</h3>\n<p>Selection process takes place during the first resolution of a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> contract. Unity container employs lazy resolution strategy. It will defer pipeline creation until the contract (<a href=\"../../../metadata/\" data-linktype=\"relative-path\">RegistrationType and Name</a>) is requested.</p>\n<p>The lazy approach allows registrations to proceed at random order and do not require dependencies to be registered before dependents. As long as all of these are available at the time of resolution Unity does not care in what order they were registered.</p>\n<h3 id=\"constructor-selection-steps\">Constructor Selection Steps</h3>\n<p>One of the first steps, when creating a pipeline, is a constructor selection. Constructors are selected in the following order:</p>\n<ul>\n<li>If present, use registered <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor</a></li>\n<li>If present, annotated with an attribute</li>\n<li>Automatically select constructor\n<ul>\n<li>Get all accessible constructors</li>\n<li>Process constructors in ascending order from most complex to the default\n<ul>\n<li>Filter out <a href=\"../constructor/#restrictions\" data-linktype=\"relative-path\">restricted</a> constructors</li>\n<li>Loop through parameters and check if\n<ul>\n<li>Is primitive\n<ul>\n<li>Is registered with the container</li>\n<li>Has <em>default</em> value</li>\n</ul>\n</li>\n<li>Is resolvable type</li>\n<li>Is registered with container</li>\n</ul>\n</li>\n<li>Select the first constructor the container can create</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The Unity container will select the first successful match and use it as a selection.</p>\n<div class=\"WARNING\">\n<h5>WARNING</h5>\n<p>When more than one constructor could be matched at the same time, the order and constructor selection can not be guaranteed.</p>\n</div>\n<p>During normal operation the container does not perform validation.</p>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>If <a href=\"../../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is enabled, Unity will perform a selection validation and will throw an exception, reporting ambiguous constructors, if more than one constructor can be successfully selected with current configuration.</p>\n</div>\n<p>If no constructor could be selected, the container will throw an exception.</p>\n<h3 id=\"pipeline-retention\">Pipeline retention</h3>\n<p>Once the pipeline is created, it will be used to satisfy all subsequent requests for that contract. If you need to update or rebuild the pipeline, the contract has to be re-registered.</p>\n\n<p><strong>See Also:</strong></p>\n<ul>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/automatic.md","depot_name":".","document_id":"c1e7c148-cf93-2de0-cc54-32701d701632","document_version_independent_id":"eca76e28-a114-ec13-d320-563b416d21f4","gitcommit":"https://github.com/unitycontainer/documentation/blob/704b5031aaedb4ba2af139c76a605c3c9b409600/tutorials/registration/Type/Constructor/automatic.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/automatic.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/automatic.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Automatic Constructor Injection","uid":"Tutorial.Injection.Constructor.Implicit","updated_at":"2019-04-30 12:00 AM","wordCount":513},{"url":"/tutorials/registration/type/constructor/constructor/","path":"tutorials/registration/type/constructor/constructor/index.html","source_path":"tutorials/registration/Type/Constructor/constructor.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/constructor/","conceptual":"\n<p>Constructor Injection is a process where Unity selects a constructor, resolves parameter dependencies, and executes the constructor by injecting it with resolved or injected dependencies.</p>\n<h2 id=\"restrictions\">Restrictions</h2>\n<p>Unity can be configured to execute any accessible constructor with the following exceptions:</p>\n<ul>\n<li><code>static</code> constructors are not supported</li>\n<li><code>private</code> and <code>protected</code> constructors are not accessible</li>\n<li>Constructors with <code>ref</code> and <code>out</code> parameters are not supported</li>\n</ul>\n<h2 id=\"selection-methods\">Selection Methods</h2>\n<p>Selecting a constructor is one of the first steps in creating a resolution pipeline. Unity supports the following selection methods:</p>\n<h3 id=\"automatic-selection\">Automatic Selection</h3>\n<p>Automatic Selection is a default method of selecting constructors. It will be used if no constructor is injected or annotated.</p>\n<p>By default Unity uses 'smart' algorithm to select constructor. It sorts all accessible constructors by number of parameters in ascending order and goes from most complex to the default, checking if it can satisfy its parameters. The container selects the first constructor it can create and executes it.</p>\n<div class=\"WARNING\">\n<h5>WARNING</h5>\n<p>Unity will not check for ambiguities unless <a href=\"../../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> extension is installed.</p>\n</div>\n<div class=\"TIP\">\n<h5>TIP</h5>\n<p>Legacy selection algorithm which selects the most complex constructor could be enabled by installing <code>Legacy</code> extension. It will replace and disable 'smart' selection.</p>\n</div>\n<h3 id=\"constructor-annotation\">Constructor Annotation</h3>\n<p>Constructor annotated with <a href=\"xref:Unity.InjectionConstructorAttribute\" data-linktype=\"external\">InjectionConstructor</a> attribute overrides automatic selection. For more information see <a href=\"../../../../annotation/constructor/\" data-linktype=\"relative-path\">Annotating Type for Constructor Injection</a></p>\n<h3 id=\"constructor-injection-1\">Constructor injection</h3>\n<p>Constructor configuration registered for the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> has highest priority. It will override other selection methods and will always execute the configured constructor.</p>\n<p>As opposed to methods, constructors do not have a name to distinguish one from the other. The only difference between constructors is number and <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> of parameters they take. Because of that constructor selection is based solely on parameters and its types.</p>\n<h4 id=\"invoking-the-constructor\">Invoking the Constructor</h4>\n<p>Invoked constructor and injection of its parameters is configured by registering the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> with the <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">InjectionConstructor</a>. Creating the <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">InjectionConstructor</a> with proper injection members or values determines what constructor is selected and how parameters are initialized. Values and resolvers added to <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">InjectionConstructor</a> will be used to initialize parameters of the constructor of the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>. The following aspects could be configured:</p>\n<ul>\n<li>Parameter <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a></li>\n<li>Force resolution of parameter</li>\n<li>Specify the Contract/Registration Name to by used when resolving</li>\n<li>Provide a Resolver for the parameter</li>\n<li>Provide value</li>\n</ul>\n<div class=\"TIP\">\n<h5>TIP</h5>\n<p>As alternative, helper <a href=\"xref:Unity.Invoke#Unity_Invoke_Constructor\" data-linktype=\"external\">Invoke.Constructor(...)</a> can be used to configure invoked constructor.</p>\n</div>\n<h4 id=\"see-also\">See Also</h4>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/constructor.md","depot_name":".","document_id":"3d0b4d82-1433-301e-4a5a-ca84297b7a66","document_version_independent_id":"2187b1df-e919-dcb8-3c5d-9436f9b6eb4b","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/registration/Type/Constructor/constructor.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/constructor.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/constructor.md","rawTitle":"<h1 id=\"constructor-injection\">Constructor Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Constructor Injection","uid":"Tutorial.Injection.Constructor","updated_at":"2019-04-05 01:56 AM","wordCount":396},{"url":"/tutorials/registration/type/constructor/param_count/","path":"tutorials/registration/type/constructor/param_count/index.html","source_path":"tutorials/registration/Type/Constructor/param_count.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/param_count/","conceptual":"\n<h2 id=\"by-number-of-parameters\">By Number of Parameters</h2>\n<p>Selecting constructor by number of parameters is the simplest form of selection. You could use this selection method if the constructor you invoking has unique number of parameters.</p>\n<h3 id=\"type-of-parameter-as-contract-type\">Type of Parameter as Contract Type</h3>\n<p>This method is useful when you are working on a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> that takes certain number of parameters but you don't care what these parameter types are.</p>\n<h4 id=\"parameters\">Parameters</h4>\n<p>In a case like this you could use <code>Resolve.Parameter()</code> to specify that you want a parameter at this position to be resolved. For example, consider the following <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>It has several constructors with different number of parameters each. Normally, the container would try to run the most complex constructor, but if you want to invoke the one with just a single parameter you need to register it like this:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>In this registration you configure the container to invoke a constructor that takes just one parameter. The parameter is resolved using a contract with a type of the parameter and no name.</p>\n<p>Now if you resolve the type, the container will invoke that constructor and inject the parameter:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div><h4 id=\"generic-parameters\">Generic Parameters</h4>\n<p>The same method as above, could be used to invoke constructors with generic parameters. Consider the following class:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>To configure the container to invoke the first constructor you would execute the same code with exception of how you pass in a type of the contract. Registration of an open generic requires a conventional method call:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>When resolved, the container will invoke the first constructor and inject it with created instance of <code>Object</code>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div><h4 id=\"parameter-dependencies-with-contract-name\">Parameter dependencies with Contract Name</h4>\n<p>When configuring constructors with the method described above you should be mindful of parameter annotations and contract names these annotations might provide.</p>\n<p>When implicitly injecting a parameter, the container will recognize all metadata the parameter is annotated with and will properly inject it with correct contract. When you add an <a href=\"xref:Unity.Injection.ResolvedParameter\" data-linktype=\"external\">InjectionMember</a> to configure the parameter you override all these annotations.</p>\n<p>If you look at the second constructor of <code>SampleType&lt;T&gt;</code> you will notice that the first parameter is marked with <a href=\"xref:Unity.DependencyAttribute\" data-linktype=\"external\">Dependency</a> attribute. Normally, when resolving that parameter, Unity will, if present, use Name of the Contract the attribute provides. But when you register it as in the following example, you will override that contract:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>When resolved, Unity will execute the constructor but instead of dependency with contract name <code>one</code> it will use contract with no name.</p>\n<p>If you need to, you could override contract name explicitly as in the following example:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>If you'd like to preserve contracts from annotations, you need to use one of the following selection methods instead.</p>\n<h3 id=\"see-also\">See Also</h3>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_count.md","depot_name":".","document_id":"f933f186-0833-8a03-bf07-0a52c0085a6b","document_version_independent_id":"12c8b824-4e4b-7d3e-eb49-04960e9f8ba3","gitcommit":"https://github.com/unitycontainer/documentation/blob/def407738a9e4faa7af27aa5378faf3b04541ed7/tutorials/registration/Type/Constructor/param_count.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_count.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/param_count.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Select Constructor By Number of Parameters","uid":"Tutorial.Injection.Constructor.Count","updated_at":"2019-03-10 08:00 PM","wordCount":555},{"url":"/tutorials/registration/type/constructor/param_none/","path":"tutorials/registration/type/constructor/param_none/index.html","source_path":"tutorials/registration/Type/Constructor/param_none.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/param_none/","conceptual":"\n<p>A <em>Default</em> called a constructor with no parameters. It could be explicitly defined on a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> or if <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> has no defined constructors, C# will implicitly create one for you.</p>\n<h2 id=\"invoking-default-constructor\">Invoking Default Constructor</h2>\n<p>To configure resolution of a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> with a default constructor you need to register that <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> with <a href=\"xref:Unity.Injection.InjectionConstructor\" data-linktype=\"external\">Injection Constructor Member</a> which takes no parameters.</p>\n<h3 id=\"class-service\">Class <code>Service</code></h3>\n<p>Consider the following <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>Class <code>Service</code> is a plain type with three accessible constructors. First constructor is a default constructor with no parameters, second and third constructors take one parameter each.</p>\n<h3 id=\"registering-service\">Registering <code>Service</code></h3>\n<p>If you try to resolve this class with no registration, Unity will select one of the constructors with parameter. You can not guarantee which one it will select because both have the same number of parameters and each could be satisfied with dependencies.</p>\n<div class=\"TIP\">\n<h5>TIP</h5>\n<p>If <a href=\"../../../../extensions/diagnostic/\" data-linktype=\"relative-path\">Diagnostic</a> is enabled, it will throw an ambiguous constructor exception.</p>\n</div>\n<p>To prevent ambiguity, or if you need to execute default constructor, you can register this <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> and instruct the container to invoke default constructor during resolution. In simplest form this registration will look like this:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>Of corse you could add other instructions like mapping, name, etc. to the registration but for simplicity it is omitted in this example.</p>\n</div>\n<h3 id=\"resolving-service\">Resolving <code>Service</code></h3>\n<p>Once you register the <code>Service</code> with the container, you can resolve it normally:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>At first resolution the container will create a pipeline which invokes a default constructor to create the <code>Service</code> and will be using it for all subsequent resolutions.</p>\n<h2 id=\"default-generic-constructor\">Default Generic Constructor</h2>\n<p>Unity can register and create Generic types. It allows to register Closed and Open Generics and can resolve constructed types based on these.</p>\n<h3 id=\"class-servicet\">Class <code>Service&lt;T&gt;</code></h3>\n<p>The principle for registering of default constructor is exactly the same as for plain types. Consider the following <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>Class <code>Service&lt;T&gt;</code> is an open generic type with two constructors. First constructor is a default constructor with no parameters and second takes one parameter.</p>\n<h3 id=\"registering-servicet\">Registering <code>Service&lt;T&gt;</code></h3>\n<p>Normally, Unity will create this <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> by executing most complex constructor. To force Unity to use default constructor you need to register <code>Service&lt;T&gt;</code> and instruct the container to invoke it during resolution. You can register constructed generic based on <code>Service&lt;T&gt;</code> like this:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>Or you can register Open Generic <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div><h3 id=\"resolving-servicet\">Resolving <code>Service&lt;T&gt;</code></h3>\n<p>If you resolve <code>Service&lt;object&gt;</code>:</p>\n<div class=\"WARNING\">\r\n<h5>WARNING</h5>\r\n<p>It looks like the sample you are looking for does not exist.</p>\r\n</div>\n<p>either registration will invoke the default constructor.</p>\n<h3 id=\"see-also\">See Also</h3>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_none.md","depot_name":".","document_id":"44080f41-8f6d-eb44-2550-bf960bb69e34","document_version_independent_id":"d1683f3a-6ff8-ac65-c68d-8171d54657d8","gitcommit":"https://github.com/unitycontainer/documentation/blob/0db2003d37b8f4c0715b03ac831d1d35afe0cd18/tutorials/registration/Type/Constructor/param_none.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_none.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/param_none.md","rawTitle":"<h1 id=\"default-constructors\">Default Constructors</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Default Constructor","uid":"Tutorial.Injection.Constructor.Default","updated_at":"2019-04-05 01:56 AM","wordCount":497},{"url":"/tutorials/registration/type/constructor/param_types/","path":"tutorials/registration/type/constructor/param_types/index.html","source_path":"tutorials/registration/Type/Constructor/param_types.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/param_types/","conceptual":"\n<h2 id=\"select-constructor-by-parameter-types\">Select Constructor by Parameter types</h2>\n<h3 id=\"exact-match\">Exact Match</h3>\n<h3 id=\"compatible-type-match\">Compatible Type Match</h3>\n<h2 id=\"contracts-with-name\">Contracts with Name</h2>\n<h3 id=\"type-matching-exactly\">Type Matching exactly</h3>\n<h3 id=\"compatible-implementation\">Compatible Implementation</h3>\n<h3 id=\"see-also\">See Also</h3>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_values/\" data-linktype=\"relative-path\">Select constructors based on injected values</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_types.md","depot_name":".","document_id":"a43b0380-00c5-f9f0-13a0-bcd8dfecb41b","document_version_independent_id":"cbce70bb-3d73-b545-7ca7-bfc6f0fed947","gitcommit":"https://github.com/unitycontainer/documentation/blob/def407738a9e4faa7af27aa5378faf3b04541ed7/tutorials/registration/Type/Constructor/param_types.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_types.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/param_types.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Select Constructor by Parameter Types","uid":"Tutorial.Injection.Constructor.Types","updated_at":"2019-03-10 08:00 PM","wordCount":39},{"url":"/tutorials/registration/type/constructor/param_values/","path":"tutorials/registration/type/constructor/param_values/index.html","source_path":"tutorials/registration/Type/Constructor/param_values.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/constructor/param_values/","conceptual":"\n<h3 id=\"see-also\">See Also</h3>\n<ul>\n<li><a href=\"../automatic/\" data-linktype=\"relative-path\">Implicit Constructor Registration</a></li>\n<li><a href=\"../annotation/\" data-linktype=\"relative-path\">Constructor Annotation</a></li>\n<li><a href=\"../param_none/\" data-linktype=\"relative-path\">Invoke default constructor</a></li>\n<li><a href=\"../param_count/\" data-linktype=\"relative-path\">Select constructors by parameters count</a></li>\n<li><a href=\"../param_types/\" data-linktype=\"relative-path\">Select constructors by parameter types</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_values.md","depot_name":".","document_id":"cd589f0b-bc03-758c-0d5f-b570dc451473","document_version_independent_id":"a6cf7331-25f9-4155-a93b-1b9b1d859246","gitcommit":"https://github.com/unitycontainer/documentation/blob/def407738a9e4faa7af27aa5378faf3b04541ed7/tutorials/registration/Type/Constructor/param_values.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Constructor/param_values.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Constructor/param_values.md","rawTitle":"<h1 id=\"selecting-constructor\">Selecting Constructor</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Select Constructor by Parameter Values","uid":"Tutorial.Injection.Constructor.Values","updated_at":"2019-03-10 08:00 PM","wordCount":20},{"url":"/tutorials/registration/type/field/","path":"tutorials/registration/type/field/index.html","source_path":"tutorials/registration/Type/field.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/field/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/field.md","depot_name":".","document_id":"c2a3677e-e25a-23fc-1d1d-afcf1cae5b9c","document_version_independent_id":"21bedaea-483b-16e5-6828-da96ffd1aa89","gitcommit":"https://github.com/unitycontainer/documentation/blob/f7cbb8984464479a73b5e679f9345c034bc91f38/tutorials/registration/Type/field.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/field.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/field.md","rawTitle":"<h1 id=\"field-injection\">Field Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Field Injection","uid":"Tutorial.Injection.Field","updated_at":"2019-03-07 05:22 AM","wordCount":0},{"url":"/tutorials/registration/type/injection/default/","path":"tutorials/registration/type/injection/default/index.html","source_path":"tutorials/registration/Type/Injection/default.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/injection/default/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/default.md","depot_name":".","document_id":"f0ac9ade-1043-129a-d73a-91953ac7b231","document_version_independent_id":"14895510-22b9-f067-0a3b-42bb0235c831","gitcommit":"https://github.com/unitycontainer/documentation/blob/1e6fcc4efe4012305b62c6babf4d0f5cb855640a/tutorials/registration/Type/Injection/default.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/default.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Injection/default.md","rawTitle":"<h1 id=\"support-for-default-values\">Support for Default Values</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Support for Default Values","uid":"Tutorial.Injection.Default","updated_at":"2019-03-11 01:08 AM","wordCount":0},{"url":"/tutorials/registration/type/injection/injected/","path":"tutorials/registration/type/injection/injected/index.html","source_path":"tutorials/registration/Type/Injection/injected.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/injection/injected/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/injected.md","depot_name":".","document_id":"32c573ec-454c-caaa-9c9c-3888e8929b0d","document_version_independent_id":"a328b057-ba1f-20ac-e60a-04ea7bebc1bf","gitcommit":"https://github.com/unitycontainer/documentation/blob/1e6fcc4efe4012305b62c6babf4d0f5cb855640a/tutorials/registration/Type/Injection/injected.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/injected.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Injection/injected.md","rawTitle":"<h1 id=\"injecting-dependency-values\">Injecting Dependency Values</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Injecting Dependency Values","uid":"Tutorial.Injection.Injected","updated_at":"2019-03-11 01:08 AM","wordCount":0},{"url":"/tutorials/registration/type/injection/injection/","path":"tutorials/registration/type/injection/injection/index.html","source_path":"tutorials/registration/Type/Injection/injection.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/injection/injection/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/injection.md","depot_name":".","document_id":"22387587-d7a8-4e6a-654c-d8728d074653","document_version_independent_id":"09bc78cd-f176-4aaa-41cd-119e51ab8aca","gitcommit":"https://github.com/unitycontainer/documentation/blob/1e6fcc4efe4012305b62c6babf4d0f5cb855640a/tutorials/registration/Type/Injection/injection.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/injection.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Injection/injection.md","rawTitle":"<h1 id=\"dependency-injection\">Dependency Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Dependency Injection","uid":"Tutorial.Injection","updated_at":"2019-03-11 01:08 AM","wordCount":0},{"url":"/tutorials/registration/type/injection/resolved/","path":"tutorials/registration/type/injection/resolved/index.html","source_path":"tutorials/registration/Type/Injection/resolved.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/injection/resolved/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/resolved.md","depot_name":".","document_id":"17dac8cb-7105-cb4b-9341-a478df7a564e","document_version_independent_id":"4afe44d5-4340-acd2-3533-c8fe0984dbcb","gitcommit":"https://github.com/unitycontainer/documentation/blob/1e6fcc4efe4012305b62c6babf4d0f5cb855640a/tutorials/registration/Type/Injection/resolved.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/Injection/resolved.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/Injection/resolved.md","rawTitle":"<h1 id=\"resolving-dependency-values\">Resolving Dependency Values</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Resolving Dependency Values","uid":"Tutorial.Injection.Resolved","updated_at":"2019-03-11 01:08 AM","wordCount":0},{"url":"/tutorials/registration/type/method/","path":"tutorials/registration/type/method/index.html","source_path":"tutorials/registration/Type/method.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/method/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/method.md","depot_name":".","document_id":"ece87da2-2138-25a2-4b62-f09b94f500d9","document_version_independent_id":"df634c41-a696-a56e-3edb-6be9079a6660","gitcommit":"https://github.com/unitycontainer/documentation/blob/f7cbb8984464479a73b5e679f9345c034bc91f38/tutorials/registration/Type/method.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/method.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/method.md","rawTitle":"<h1 id=\"method-invocation\">Method Invocation</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Method Injection","uid":"Tutorial.Injection.Method","updated_at":"2019-03-07 05:22 AM","wordCount":0},{"url":"/tutorials/registration/type/parameter/","path":"tutorials/registration/type/parameter/index.html","source_path":"tutorials/registration/Type/parameter.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/parameter/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/parameter.md","depot_name":".","document_id":"cb8b1b59-03db-0e46-fead-1d5d5a92812f","document_version_independent_id":"a8fc56d0-58e8-03ea-b38f-ad68a88818c2","gitcommit":"https://github.com/unitycontainer/documentation/blob/f7cbb8984464479a73b5e679f9345c034bc91f38/tutorials/registration/Type/parameter.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/parameter.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/parameter.md","rawTitle":"<h1 id=\"parameter-injection\">Parameter Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Parameter Injection","uid":"Tutorial.Injection.Parameter","updated_at":"2019-03-07 05:22 AM","wordCount":0},{"url":"/tutorials/registration/type/property/","path":"tutorials/registration/type/property/index.html","source_path":"tutorials/registration/Type/property.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/property/","conceptual":"\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/property.md","depot_name":".","document_id":"e1fdee6b-4cc3-4110-4ed7-a825595503d1","document_version_independent_id":"d1d79004-065d-bfbf-d2b1-f3c2a6da14df","gitcommit":"https://github.com/unitycontainer/documentation/blob/f7cbb8984464479a73b5e679f9345c034bc91f38/tutorials/registration/Type/property.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/property.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/property.md","rawTitle":"<h1 id=\"property-injection\">Property Injection</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Property Injection","uid":"Tutorial.Injection.Property","updated_at":"2019-03-07 05:22 AM","wordCount":0},{"url":"/tutorials/registration/type/registration/","path":"tutorials/registration/type/registration/index.html","source_path":"tutorials/registration/Type/registration.md","locale":"en-us","canonical_url":"https:///en-us/tutorials/registration/type/registration/","conceptual":"\n<p>Type registration is where all the Unity magic is happening. It provides complete and flexible control of all aspects of type creation and management.</p>\n<p>When a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> is registered Unity creates a contract (a registration) consisting of a <strong>Type</strong>, a <strong>Name</strong>, and instructions on how this contract should be fulfilled when requested.</p>\n<h2 id=\"minimum-registration-requirements\">Minimum Registration Requirements</h2>\n<p>The only required part of the registration is a registered <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> itself. Theoretically you could register a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;Service&gt;();\n</code></pre>\n<p>This would tell the container to use all defaults when creating <code>Service</code>. Registrations like this do not make much sense. If creation process does not require any customization, all that time spent on registering such <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> is wasted. It is measurably faster to resolve a plain <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> from the container if it is not registered at all.</p>\n<p>When a <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> is annotated with injection attributes it does not require registration either. If you are satisfied with annotated selections, appropriate constructor and all other members are annotated, and you do not require lifetime management for created instances, the <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> should not be registered.</p>\n<p>You should only register types if at least one of the following is true:</p>\n<ul>\n<li>Contract/Registration requires a Name</li>\n<li>Require a mapping between service and implementation types</li>\n<li>Require lifetime policy other than transient</li>\n<li>Need to override injection annotated with attribute(s)</li>\n<li>Nondefault constructor should be selected</li>\n<li>Properties or fields should be injected</li>\n<li>Method(s) should be called during initialization</li>\n</ul>\n<h2 id=\"creating-registration-contracts\">Creating Registration Contracts</h2>\n<p>Simplest form of a contract is a registration without a Name ( the Name is <code>null</code> ). This type of registration is called <code>default</code> and in some cases is used as a prototype during resolution of Generic types (hence name <code>default</code>).</p>\n<p>A contract could have a Name. The Name could be any arbitrary string of one or more characters. The simple named contract could be registered like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;Service&gt;(&quot;Contract Name&quot;);\n</code></pre>\n<div class=\"NOTE\">\n<h5>NOTE</h5>\n<p>It is not recommended to use empty strings as names.</p>\n</div>\n<h2 id=\"creating-type-mapping\">Creating Type Mapping</h2>\n<p>A mapping instructs Unity on how to satisfy the contract and what implementation <a href=\"xref:System.Type\" data-linktype=\"external\">Type</a> should be used to create an object. For example is you want to associate an interface <code>IService</code> with implementation <code>Service</code> you would register it like this:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, Service&gt;();\n</code></pre>\n<p>Or you could register multiple implementations for the same service:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, MailService&gt;(&quot;Email&quot;);\ncontainer.RegisterType&lt;IService, WebService&gt;(&quot;WebMail&quot;);\ncontainer.RegisterType&lt;IService, SecureService&gt;(&quot;Encrypted&quot;);\n</code></pre>\n<p>For more information see &lt;xref:Tutorial.Registration.Mapping&gt;</p>\n<h2 id=\"lifetime-management\">Lifetime Management</h2>\n<p>Unity provides wide variety of lifetime managers <a href=\"xref:Unity.TypeLifetime\" data-linktype=\"external\">compatible</a> with type registrations. Each of these managers provide unique algorithm for instance management.</p>\n<p>In example above services are created on each request. In most cases it is desireable to create services only once. To create singleton services appropriate lifetime managers must be added to the registration:</p>\n<pre><code class=\"lang-cs\">container.RegisterType&lt;IService, MailService&gt;(&quot;Email&quot;, TypeLifetime.Singleton);\ncontainer.RegisterType&lt;IService, WebService&gt;(&quot;WebMail&quot;, TypeLifetime.Singleton);\ncontainer.RegisterType&lt;IService, SecureService&gt;(&quot;Encrypted&quot;, TypeLifetime.Singleton);\n</code></pre>\n<p>For more information about lifetime management see <a href=\"../../../lifetime/lifetime/\" data-linktype=\"relative-path\">Lifetime Management</a></p>\n<h2 id=\"creation-pipeline\">Creation Pipeline</h2>\n<p>Unity instantiates an objects by creating a resolver pipeline and executing it with passed in injection values. Each pipeline consists of a several steps with each step performing part of the initialization.</p>\n<p>How the pipeline is assembled and what values are injected is controlled by collection of <a href=\"xref:Unity.Injection.InjectionMember\" data-linktype=\"external\">Injection Member</a> objects passed to registration method. The normal steps of the object creation process are:</p>\n<h2 id=\"injection-instructions\">Injection Instructions</h2>\n<p>During the registration you could Configure the container to select certain constructor, initialize properties and fields, call methods, and inject values and instructions for dependencies. All this is done by passing appropriate <a href=\"xref:Unity.Injection\" data-linktype=\"external\">Injection Members</a> to the registration. For more information see:</p>\n<ul>\n<li><a href=\"../constructor/constructor/\" data-linktype=\"relative-path\">Constructor invocation and injection</a></li>\n<li><a href=\"../field/\" data-linktype=\"relative-path\">Fields injection</a></li>\n<li><a href=\"../property/\" data-linktype=\"relative-path\">Properties injection</a></li>\n<li><a href=\"../method/\" data-linktype=\"relative-path\">Method(s) invocation and injection</a></li>\n</ul>\n","content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/registration.md","depot_name":".","document_id":"78bfd467-15ee-c33f-03fe-7bf8e5fa4acf","document_version_independent_id":"6550f935-d2d3-ea0d-a876-56627397815d","gitcommit":"https://github.com/unitycontainer/documentation/blob/2db5f0db6ca55d08f45572868da0e40bb64f7bc0/tutorials/registration/Type/registration.md","is_dynamic_rendering":true,"locale":"en-us","original_content_git_url":"https://github.com/unitycontainer/documentation/blob/develop/tutorials/registration/Type/registration.md","original_content_git_url_template":"{repo}/blob/{branch}/tutorials/registration/Type/registration.md","rawTitle":"<h1 id=\"type-registration\">Type Registration</h1>","search.ms_docsetname":"","search.ms_product":"","search.ms_sitename":"Docs","site_name":"Docs","title":"Type Registration","uid":"Tutorial.Registration.Type","updated_at":"2019-03-11 12:52 AM","wordCount":576},{"url":"/tutorials/toc.json","path":"tutorials/toc.json","source_path":"tutorials/toc.yml","locale":"en-us"}]}